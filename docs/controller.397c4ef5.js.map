{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-01737bfe2a89830e.js","src/prototypes/controller/controller_test.ts","src/prototypes/controller/arcade/debugpanel.ts","src/prototypes/controller/arcade/joystick.ts","src/prototypes/controller/arcade/arcade.ts","src/prototypes/controller/player.ts","src/prototypes/controller/test_ground.ts","src/prototypes/controller/background.ts","node_modules/@parcel/runtime-js/lib/runtime-3e678eaa0815162f.js","node_modules/@parcel/runtime-js/lib/runtime-2499936ec3288d7c.js","node_modules/@parcel/runtime-js/lib/runtime-943d26f12dfb3f0b.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"6DHNs\\\":\\\"controller.397c4ef5.js\\\",\\\"j35bh\\\":\\\"Char1_1.353fe21a.png\\\",\\\"7PbZH\\\":\\\"test_background2.3b768567.jpg\\\",\\\"2IBRc\\\":\\\"test_ground2.34569c95.jpg\\\",\\\"9hto7\\\":\\\"audio.fcc44636.js\\\"}\"));","// Import PIXI\r\nimport * as PIXI from 'pixi.js';\r\n\r\n// Import controller controls\r\nimport { Arcade } from './arcade/arcade';\r\n\r\n// Import classes\r\nimport { Player } from './player';\r\nimport { Ground } from './test_ground';\r\nimport { Background } from './background';\r\n\r\n// Import Images\r\nimport testChar from '../../images/Char1_1.png';\r\nimport testBack from '../../images/test_background2.jpg';\r\nimport testGround from '../../images/test_ground2.jpg';\r\n\r\nexport class Game {\r\n    // Globals\r\n    private pixi : PIXI.Application;\r\n    private loader : PIXI.Loader;\r\n\r\n    public pixiWidth = 800;\r\n    public pixiHeight = 450;\r\n\r\n    public arcade : Arcade;\r\n    private joystickListener : EventListener;\r\n\r\n    private player: Player;\r\n    private ground : Ground;\r\n    private background : Background;\r\n\r\n    constructor() {\r\n        this.pixi = new PIXI.Application({width: this.pixiWidth, height: this.pixiHeight});\r\n        this.pixi.stage.interactive = true;\r\n        this.pixi.stage.hitArea = this.pixi.renderer.screen;\r\n        document.body.appendChild(this.pixi.view);\r\n\r\n        // create arcade cabinet with 2 joysticks (with 6 buttons)\r\n        this.arcade = new Arcade(this);\r\n\r\n        // Create Loader\r\n        this.loader = new PIXI.Loader();\r\n        this.loader\r\n                .add(\"playerTexture\", testChar)\r\n                .add(\"backgroundTexture\", testBack)\r\n                .add(\"groundTexture\", testGround);\r\n        this.loader.load();\r\n        \r\n        //The game must wait for de joysticks to connect\r\n        console.log(\"waiting for joysticks to connect\");\r\n        this.joystickListener = (e: Event) => this.joyStickFound(e as CustomEvent);\r\n        document.addEventListener(\"joystickcreated\",  this.joystickListener);\r\n    }\r\n\r\n    private joyStickFound(e:CustomEvent) {\r\n        let joystick = this.arcade.Joysticks[e.detail];\r\n        \r\n        // debug, this shows you the names of the buttons when they are pressed\r\n        for (const buttonEvent of joystick.ButtonEvents) {\r\n            document.addEventListener(buttonEvent, () => console.log(buttonEvent));\r\n        }\r\n\r\n        // Create background\r\n        this.background = new Background(this.loader.resources[\"backgroundTexture\"].texture!, this.pixiWidth, this.pixiHeight);\r\n        this.pixi.stage.addChild(this.background);\r\n\r\n        // Create ground\r\n        this.ground = new Ground(this.loader.resources[\"groundTexture\"].texture!);\r\n        this.pixi.stage.addChild(this.ground);\r\n\r\n        // Create Player\r\n        this.player = new Player(this.loader.resources[\"playerTexture\"].texture!, joystick);\r\n        this.pixi.stage.addChild(this.player);\r\n\r\n        // start pixi\r\n        this.pixi.ticker.add((delta) => this.update())\r\n    }\r\n\r\n    update() {\r\n        for (let joystick of this.arcade.Joysticks) {\r\n            joystick.update();\r\n        }\r\n\r\n        this.player.update();\r\n\r\n        // Vertical collision player with ground\r\n        if(this.player.collisionVerticalTop(this.ground) && this.player.y + this.player.height < this.ground.y + this.player.yspeed){\r\n            this.player.y = this.ground.y - this.player.height;\r\n            this.player.yspeed = 0;\r\n        }\r\n    }\r\n\r\n    public disconnect() {\r\n        document.removeEventListener(\"joystickcreated\", this.joystickListener);\r\n    }\r\n}\r\n\r\nnew Game();","import { Joystick } from \"./joystick\"\r\n\r\n//#region Template\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `\r\n<style>\r\n:host {\r\n    position:           absolute;\r\n    top:                10px;\r\n    right:              10px;\r\n}\r\nroot {\r\n    top:                10px;\r\n    right:              10px;\r\n    width:              289px; \r\n    height:             120px;\r\n    display:            block;\r\n    background-color:   #75a8f77a;\r\n}\r\nroot * {\r\n    position:           relative;\r\n}\r\n.button-wrapper, .axes-wrapper {\r\n    display:            flex;\r\n    flex-wrap:          wrap;\r\n    float:              left;\r\n}\r\nroot .button-div {\r\n    border: solid 1px black;\r\n    width:              60px;\r\n    margin:             5px;\r\n    padding:            5px;\r\n}\r\n.button-wrapper {\r\n    width:              164px;\r\n}\r\n.axes-wrapper {\r\n    width:              115px;\r\n    margin:             5px;\r\n}\r\n.axes-cell {\r\n    width:              25px;  \r\n    height:             25px; \r\n    margin:             5px;  \r\n    border:             solid 1px transparent;\r\n}\r\n.axes-cell.direction {\r\n    border:             solid 1px black;\r\n}\r\n.axes-cell.center{\r\n    border:             solid 1px black;\r\n    background-color:   blue;\r\n}\r\n.axes-cell.active{\r\n    background-color:   red;\r\n}\r\n.identifier{\r\n    position:           absolute;\r\n    top:                5px;\r\n    left:               5px;\r\n    width:              auto;\r\n    font-weight:        bold;\r\n    color:              #fff;\r\n}\r\n</style>`\r\n//#endregion\r\n\r\nexport class DebugPanel extends HTMLElement {\r\n    private readonly panelHeight: number = 120\r\n    private readonly panelSpacing: number = 10\r\n\r\n    private joystick: Joystick\r\n    private numberOfButtons: number\r\n    private buttonDivs: HTMLElement[] = []\r\n\r\n    private left: HTMLElement\r\n    private right: HTMLElement\r\n    private up: HTMLElement\r\n    private down: HTMLElement\r\n\r\n    private rootElement: HTMLElement\r\n\r\n    public Axes: number[] = []\r\n\r\n    constructor(joystick: Joystick, numOfButtons: number) {\r\n        super()\r\n\r\n        this.joystick = joystick\r\n        this.numberOfButtons = numOfButtons\r\n\r\n        let spaceFromTop = this.panelSpacing + (this.joystick.JoystickNumber * (this.panelHeight + this.panelSpacing))\r\n        this.style.top = spaceFromTop + \"px\"\r\n\r\n        this.rootElement = document.createElement('root')\r\n        this.rootElement.style.height = this.panelHeight + \"px\"\r\n        template.appendChild(this.rootElement)\r\n\r\n        // identifier\r\n        let identifier = document.createElement(\"div\")\r\n        identifier.classList.add('identifier')\r\n        identifier.innerHTML = \"#\" + this.joystick.JoystickNumber\r\n        this.rootElement.appendChild(identifier)\r\n\r\n        // axes\r\n        this.createHTMLForAxes()\r\n\r\n        // this.buttons = buttons\r\n        this.createHTMLForButtons()\r\n        this.createListenersForButtons()\r\n\r\n        this.attachShadow({ mode: 'open' })\r\n        if (this.shadowRoot) {\r\n            let temp = template.content.cloneNode(true)\r\n            temp.appendChild(this.rootElement)\r\n            this.shadowRoot.appendChild(temp)\r\n\r\n        }\r\n\r\n        document.body.appendChild(this)\r\n    }\r\n\r\n    private createListenersForButtons() {\r\n        for (let i = 0; i < this.numberOfButtons; i++) {\r\n            document.addEventListener(this.joystick.ButtonEvents[i],\r\n                (e: Event) => this.handleButtonClicks(e, i))\r\n        }\r\n    }\r\n\r\n    private handleButtonClicks(event: Event, index: number) {\r\n        this.buttonDivs[index].style.filter =\r\n            'hue-rotate(' + (Math.random() * 360) + 'deg)'\r\n    }\r\n\r\n    private createHTMLForButtons(): void {\r\n        let buttonWrapper = document.createElement(\"div\")\r\n        buttonWrapper.className = \"button-wrapper\"\r\n\r\n        for (let index = 0; index < this.numberOfButtons; index++) {\r\n            let buttonDiv = document.createElement(\"div\")\r\n            buttonDiv.className = \"button-div\"\r\n            buttonWrapper.appendChild(buttonDiv)\r\n\r\n            buttonDiv.style.backgroundColor = \"blue\"\r\n            buttonDiv.innerHTML = \"Button \" + (index + 1)\r\n\r\n            this.buttonDivs.push(buttonDiv)\r\n        }\r\n        this.rootElement.appendChild(buttonWrapper)\r\n    }\r\n\r\n    private createHTMLForAxes(): void {\r\n        let axesWrapper = document.createElement(\"div\")\r\n        axesWrapper.className = \"axes-wrapper\"\r\n\r\n        for (let i = 1; i <= 9; i++) {\r\n            let cell = document.createElement('div')\r\n            cell.className = \"axes-cell\"\r\n            if (i % 2 == 0) cell.classList.add(\"direction\")\r\n            if (i == 5) cell.classList.add(\"center\")\r\n            axesWrapper.appendChild(cell)\r\n\r\n            switch (i) {\r\n                case 2:\r\n                    this.up = cell\r\n                    break\r\n                case 4:\r\n                    this.left = cell\r\n                    break\r\n                case 6:\r\n                    this.right = cell\r\n                    break\r\n                case 8:\r\n                    this.down = cell\r\n                    break\r\n            }\r\n        }\r\n\r\n        this.rootElement.appendChild(axesWrapper)\r\n    }\r\n\r\n    public update(): void {\r\n        // X-axe\r\n        if (this.Axes[0] == 0) {\r\n            this.left.classList.remove(\"active\")\r\n            this.right.classList.remove(\"active\")\r\n        }\r\n        else {\r\n            if (this.Axes[0] < 0)\r\n                this.left.classList.add(\"active\")\r\n            else if (this.Axes[0] > 0)\r\n                this.right.classList.add(\"active\")\r\n        }\r\n\r\n        // Y-axe\r\n        if (this.Axes[1] == 0) {\r\n            this.up.classList.remove(\"active\")\r\n            this.down.classList.remove(\"active\")\r\n        }\r\n        else {\r\n            if (this.Axes[1] < 0)\r\n                this.up.classList.add(\"active\")\r\n            else if (this.Axes[1] > 0)\r\n                this.down.classList.add(\"active\")\r\n        }\r\n    }\r\n}\r\n\r\nwindow.customElements.define(\"debug-panel\", DebugPanel)","import { DebugPanel } from \"./debugpanel\"\r\n\r\nexport class Joystick {\r\n\r\n    private DEBUG: boolean = true\r\n\r\n    // BUT1 and BUT2 are the indexes of the redirect function. \r\n    // When both are pressed, redirect to homepage\r\n    private readonly BUT1: number = 8\r\n    private readonly BUT2: number = 9\r\n\r\n    // FIELDS\r\n    private joystickNumber: number = 0\r\n    private numberOfBUttons: number = 0\r\n    private buttonEvents: string[] = []\r\n    private axes: number[] = []\r\n\r\n    private gamepad: Gamepad\r\n    private previousGamepad: Gamepad\r\n\r\n    private debugPanel: DebugPanel\r\n\r\n    // PROPERTIES\r\n    // Axes as booleans\r\n    public get Left(): boolean { return (this.axes[0] == -1) }\r\n    public get Right(): boolean { return (this.axes[0] == 1) }\r\n    public get Up(): boolean { return (this.axes[1] == -1) }\r\n    public get Down(): boolean { return (this.axes[1] == 1) }\r\n    public get Neutral(): boolean { return this.axes[0] == 0 && this.axes[1] == 0 }\r\n    // Axes as direction\r\n    // values are -1, 0, 1 because arcade sticks are digital\r\n    public get Y(): number { return Math.round(this.axes[1]) }\r\n    public get X(): number { return Math.round(this.axes[0]) }\r\n\r\n    // Joystick identifier\r\n    public get JoystickNumber(): number { return this.joystickNumber }\r\n    public get ButtonEvents(): string[] { return this.buttonEvents }\r\n\r\n    // Current gamepad\r\n    public get Gamepad(): Gamepad { return this.gamepad }\r\n    public set Gamepad(gamepad: Gamepad) { this.gamepad = gamepad }\r\n\r\n    // previous gamepad\r\n    public get PreviousGamepad(): Gamepad { return this.previousGamepad }\r\n    public set PreviousGamepad(previousGamepad: Gamepad) { this.previousGamepad = previousGamepad }\r\n\r\n    /**\r\n     * Creates a joystick object for one player\r\n     * @param joystickNumber The number of the first joystick (starts at 0)\r\n     * @param numOfButtons The number of buttons needed by your game\r\n     * @param debug true for in browser gamepad info\r\n     */\r\n    constructor(joystickNumber: number, numOfButtons: number, debug: boolean) {\r\n        this.joystickNumber = joystickNumber\r\n        this.numberOfBUttons = numOfButtons\r\n        this.DEBUG = debug\r\n\r\n        for (let i = 0; i < this.numberOfBUttons; i++) {\r\n            this.buttonEvents.push('joystick' + this.JoystickNumber + 'button' + (i))\r\n        }\r\n\r\n        if (this.DEBUG) { this.debugPanel = new DebugPanel(this, this.numberOfBUttons) }\r\n    }\r\n\r\n    public update(): void {\r\n        let gamepad = navigator.getGamepads()[this.gamepad.index]\r\n        if (gamepad) { this.readGamepad(gamepad) }\r\n    }\r\n\r\n    private readGamepad(gamepad: Gamepad): void {\r\n        for (let index = 0; index < this.numberOfBUttons; index++) {\r\n            if (this.buttonPressed(gamepad.buttons[index]) && !this.buttonPressed(this.previousGamepad.buttons[index])) {\r\n                document.dispatchEvent(new Event(this.buttonEvents[index]))\r\n            }\r\n            if (this.buttonPressed(gamepad.buttons[this.BUT1]) &&\r\n                this.buttonPressed(gamepad.buttons[this.BUT2]) &&\r\n                (!this.buttonPressed(this.previousGamepad.buttons[this.BUT1]) || !this.buttonPressed(this.previousGamepad.buttons[this.BUT2]))) {\r\n                document.dispatchEvent(new Event('redirect'))\r\n            }\r\n        }\r\n\r\n        // gamepad has 4 axes, first is x, second is y\r\n        // an axe returns a float, only int is needed\r\n        this.axes[0] = Math.round(gamepad.axes[0])\r\n        this.axes[1] = Math.round(gamepad.axes[1])\r\n\r\n        if (this.DEBUG) {\r\n            // update the axes (x and y)\r\n            this.debugPanel.Axes[0] = this.axes[0]\r\n            this.debugPanel.Axes[1] = this.axes[1]\r\n\r\n            this.debugPanel.update()\r\n        }\r\n\r\n        this.previousGamepad = gamepad\r\n    }\r\n    /**\r\n     * Helper function to filter some bad input\r\n     * @param b \r\n     */\r\n    private buttonPressed(b: any): any {\r\n        if (typeof (b) == \"object\") {\r\n            return b.pressed\r\n        }\r\n        return b == 1.0\r\n    }\r\n\r\n    public destroy() {\r\n        if (this.DEBUG) this.debugPanel.remove()\r\n    }\r\n}","import { Game } from \"../controller_test\"\r\nimport { Joystick } from \"./joystick\"\r\n\r\nexport class Arcade {\r\n    private DEBUG: boolean\r\n    private joysticks: Joystick[]\r\n    private readonly REDIRECT_URL: string = \"http://hr-cmgt.github.io/arcade-server\"\r\n    private multiplayer: boolean = false\r\n    private game: Game\r\n    // PROPERTIES\r\n    public get Joysticks(): Joystick[] { return this.joysticks }\r\n\r\n    /**\r\n     * Creates an arcade 'cabinet' \r\n     * @param mp 'true' for 2 joystick multiplayer Arcade (default single player)\r\n     */\r\n    constructor(game: Game, mp: boolean = false, debug: boolean = false) {\r\n        this.game = game\r\n        this.multiplayer = mp\r\n        this.DEBUG = debug\r\n        this.joysticks = []\r\n\r\n        if (this.DEBUG) this.showStatus(\"Gamepad is NOT connected. Press a button to connect\")\r\n\r\n        document.addEventListener(\"redirect\", () => this.onRedirect())\r\n        window.addEventListener(\"gamepadconnected\", (e: Event) => this.onGamePadConnected(e as GamepadEvent))\r\n        window.addEventListener(\"gamepaddisconnected\", (e: Event) => this.onGamePadDisconnected(e as GamepadEvent))\r\n    }\r\n\r\n    /**\r\n     * Handles redirect fired from joystick\r\n     */\r\n    private onRedirect(): void {\r\n        if (this.DEBUG) { console.log('redirect!!') }\r\n        window.location.href = this.REDIRECT_URL\r\n    }\r\n\r\n    /**\r\n     * Handles connecting a joystick\r\n     * @param e Gamepad event\r\n     */\r\n    private onGamePadConnected(e: GamepadEvent): void {\r\n        if (this.DEBUG) {\r\n            console.log('Game pad connected')\r\n            console.log(\"Joystick number: \" + e.gamepad.index)\r\n        }\r\n        if ((!this.multiplayer && this.joysticks.length == 0) || this.multiplayer) {\r\n            let joystick = this.createAndAddJoystick(e.gamepad.index, 6)\r\n\r\n            joystick.PreviousGamepad = joystick.Gamepad\r\n            joystick.Gamepad = e.gamepad\r\n            if (joystick.PreviousGamepad == null) {\r\n                joystick.PreviousGamepad = e.gamepad\r\n            }\r\n        }\r\n\r\n        if (this.DEBUG) this.removeStatus()\r\n    }\r\n\r\n    /**\r\n     * Handles disconnecting a joystick\r\n     * @param e Gamepad event\r\n     */\r\n    private onGamePadDisconnected(e: GamepadEvent): void {\r\n        if (this.DEBUG) { console.log('Game pad disconnected') }\r\n        if (this.DEBUG) this.showStatus(\"Gamepad is NOT connected. Connect the gamepad and press a button.\")\r\n        this.removeJoystick(e.gamepad.index)\r\n        this.game.disconnect()\r\n    }\r\n\r\n    /**\r\n     * Creates an Joystick and adds it to this arcade\r\n     * @param joystickNumber Unique identifier given by the joystick\r\n     * @param numOfButtons Sets number of buttons on joystick\r\n     */\r\n    public createAndAddJoystick(joystickNumber: number, numOfButtons: number): Joystick {\r\n        let joystickCheck = this.getJoystickByNumber(joystickNumber)\r\n        if (joystickCheck != null) {\r\n            return joystickCheck\r\n        }\r\n\r\n        let joystickNew = new Joystick(joystickNumber, numOfButtons, this.DEBUG)\r\n        this.joysticks[joystickNumber] = joystickNew\r\n        if (joystickNew) {\r\n            document.dispatchEvent(new CustomEvent(\"joystickcreated\", { detail: joystickNumber }))\r\n            console.log(\"joystick created\")\r\n        }\r\n        return joystickNew\r\n    }\r\n\r\n    /**\r\n     * Removes a Joystick from this arcade\r\n     * @param joystickNumber Unique identifier of the joystick\r\n     */\r\n    public removeJoystick(joystickNumber: number): void {\r\n        let joystickCheck = this.getJoystickByNumber(joystickNumber)\r\n        if (joystickCheck == null) {\r\n            return\r\n        }\r\n\r\n        var index = this.joysticks.indexOf(joystickCheck)\r\n        this.joysticks[index].destroy()\r\n        if (index > -1) {\r\n            this.joysticks.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a Joystick with its unique identifier\r\n     * @param joystickNumber Unique identifier given by the joystick\r\n     */\r\n    public getJoystickByNumber(joystickNumber: number): any {\r\n        for (let joystick of this.joysticks) {\r\n            if (joystick.JoystickNumber == joystickNumber) {\r\n                return joystick\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    private showStatus(content: string) {\r\n        let container\r\n        let p\r\n        if (!(container = document.getElementsByTagName(\"status\")[0])) {\r\n            container = document.createElement(\"status\")\r\n            document.body.append(container)\r\n        }\r\n        if (container) {\r\n            if (!(p = container.getElementsByTagName(\"p\")[0])) {\r\n                p = document.createElement(\"p\")\r\n                container.appendChild(p)\r\n            }\r\n        }\r\n        if (p) {\r\n            p.innerHTML = content\r\n        }\r\n    }\r\n\r\n    private removeStatus() {\r\n        let status\r\n        if (status = document.getElementsByTagName(\"status\")[0]) {\r\n            status.remove()\r\n        }\r\n    }\r\n}","// Import PIXI\r\nimport * as PIXI from 'pixi.js';\r\n\r\n// Import controller controls\r\nimport { Joystick } from './arcade/joystick';\r\n\r\nexport class Player extends PIXI.Sprite {\r\n    // Globals\r\n    private joystick : Joystick;\r\n\r\n    private xspeed = 5;\r\n    public yspeed = 3;\r\n    private weigth = 0.3;\r\n    \r\n    constructor(texture: PIXI.Texture, joystick: Joystick) {\r\n        super(texture);\r\n        \r\n        // Setting width & height\r\n        this.width = 51;\r\n        this.height = 72;\r\n\r\n        // Setting start position\r\n        this.x = 80;\r\n        this.y = 60;\r\n\r\n        // Adding event listeners for controller\r\n        this.joystick = joystick;\r\n        document.addEventListener(this.joystick.ButtonEvents[0], () => this.jump());\r\n    }\r\n\r\n    private jump(){\r\n        if(this.yspeed === 0){\r\n            // Jump\r\n            this.yspeed = -9;\r\n        }\r\n    }\r\n\r\n    public update() {\r\n        // player movement & speed\r\n        this.x += this.joystick.X * this.xspeed;\r\n        this.y += this.yspeed;\r\n\r\n        // player gravity\r\n        this.yspeed += this.weigth;\r\n\r\n        // Fall offscreen\r\n        if(this.y > 500){\r\n            this.resetPosition();\r\n        }\r\n    }\r\n\r\n    private resetPosition() {\r\n        // The respawn position of the player\r\n        this.x = 80;\r\n        this.y = 60;\r\n    }\r\n\r\n    public collisionVerticalTop(object: PIXI.Sprite) {\r\n        if(this.x > object.x + object.width || this.x + this.width < object.x || this.y > object.y + object.height || this.y + this.height < object.y){\r\n            // Return false if the player doesn't stand on/in the object\r\n            return false;\r\n        } else {\r\n            // Return true if the player stands on/in the object\r\n            return true;\r\n        }\r\n    }\r\n}","// Import PIXI\r\nimport * as PIXI from 'pixi.js';\r\n\r\nexport class Ground extends PIXI.Sprite{\r\n\r\n    constructor(texture: PIXI.Texture){\r\n        super(texture);\r\n\r\n        // Setting the start position\r\n        this.x = 0;\r\n        this.y = 350;\r\n\r\n        // Setting the width & height\r\n        this.width = 500;\r\n        this.height = 70;\r\n    }\r\n}\r\n","// Import PIXI\r\nimport * as PIXI from 'pixi.js';\r\n\r\nexport class Background extends PIXI.Sprite{\r\n\r\n    constructor(texture: PIXI.Texture, width: number, height: number){\r\n        super(texture);\r\n\r\n        // Setting width & height\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"j35bh\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7PbZH\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"2IBRc\")).toString();"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$31xg4","$01eaf695fd868fc6$var$template","document","createElement","innerHTML","$01eaf695fd868fc6$export$aa8b56e5f619ede7","HTMLElement","panelHeight","panelSpacing","buttonDivs","Axes","constructor","joystick","numOfButtons","super","this","numberOfButtons","spaceFromTop","JoystickNumber","style","top","rootElement","height","appendChild","identifier","classList","add","createHTMLForAxes","createHTMLForButtons","createListenersForButtons","attachShadow","mode","shadowRoot","temp","content","cloneNode","body","addEventListener","ButtonEvents","e","handleButtonClicks","event","index","filter","Math","random","buttonWrapper","className","buttonDiv","backgroundColor","push","axesWrapper","cell","up","left","right","down","update","remove","window","customElements","define","$af4260074e4054b5$export$41026bc5091240de","DEBUG","BUT1","BUT2","joystickNumber","numberOfBUttons","buttonEvents","axes","Left","Right","Up","Down","Neutral","Y","round","X","Gamepad","gamepad","PreviousGamepad","previousGamepad","debug","debugPanel","navigator","getGamepads","readGamepad","buttonPressed","buttons","dispatchEvent","Event","$3ffe46be5f6be869$export$867450f2bdc4b8d5","REDIRECT_URL","multiplayer","Joysticks","joysticks","game","mp","showStatus","onRedirect","onGamePadConnected","onGamePadDisconnected","console","log","location","href","createAndAddJoystick","removeStatus","removeJoystick","disconnect","joystickCheck","getJoystickByNumber","joystickNew","CustomEvent","detail","indexOf","destroy","splice","$2a89c71d53fce035$export$2616165974278734","Sprite","xspeed","yspeed","weigth","texture","width","x","y","jump","resetPosition","collisionVerticalTop","object","$6e043ab646de30da$export$c6957adcf93c393f","$a360887632380e31$export$668799e4797757a8","$9d2aaae0c0bee580$exports","URL","resolve","import","meta","url","toString","$0646b38137393c02$exports","$ddbdd6dd3c22ab00$exports","pixiWidth","pixiHeight","pixi","Application","stage","interactive","hitArea","renderer","screen","view","arcade","loader","Loader","$parcel$interopDefault","load","joystickListener","joyStickFound","buttonEvent","background","resources","addChild","ground","player","ticker","delta","removeEventListener"],"version":3,"file":"controller.397c4ef5.js.map"}