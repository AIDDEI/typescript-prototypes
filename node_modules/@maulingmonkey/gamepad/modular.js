(function(root){var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        function cloneGamepad(original) {
            if (!original)
                return original;
            var clone = {
                id: original.id,
                displayId: original.displayId,
                mapping: original.mapping,
                index: original.index,
                timestamp: original.timestamp,
                connected: original.connected,
                axes: new Array(original.axes.length),
                buttons: new Array(original.buttons.length)
            };
            for (var i = 0; i < original.axes.length; ++i) {
                clone.axes[i] = original.axes[i];
            }
            for (var i = 0; i < original.buttons.length; ++i) {
                var _a = original.buttons[i], pressed = _a.pressed, value = _a.value, touched = _a.touched;
                touched = touched || false;
                clone.buttons[i] = { pressed: pressed, value: value, touched: touched };
            }
            return clone;
        }
        gamepad.cloneGamepad = cloneGamepad;
        function cloneGamepads(original) {
            var clone = new Array(original.length);
            for (var i = 0; i < original.length; ++i)
                clone[i] = cloneGamepad(original[i]);
            return clone;
        }
        gamepad.cloneGamepads = cloneGamepads;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var config;
        (function (config) {
            /**
             * Microsoft Edge now responds to gamepad input in a way that is *very* likely to conflict with your own
             * gamepad handling.  For example, hitting (B) will focus... the address bar?  Home button?  Something in
             * the browser header that isn't what you want.  By enabling this (default behavior), we mark all Edge's
             * gamepad key events as handled, disabling the conflicting Edge behavior.
             *
             * If you want the default  Microsoft Edge gamepad navigation behavior, disable this option. You might
             * consider disabling this during your title screen, or alternatively making a quit option that navigates
             * back in history, or otherwise provide some kind of mechanism to allow users to return gamepad control
             * to it's browser navigation role.
             *
             * In the future, disabling this may also add some navigation behavior to Chrome/Firefox to match IE11's
             * behavior.  Or this option might go away entirely in favor of a better approach.
             */
            config.captureGamepadEvents = true;
        })(config = gamepad.config || (gamepad.config = {}));
        /** @hidden */
        var defaultOptions = { deadZone: 0.15, keepInactive: true, keepNonstandard: true, keepNull: true, standardize: true };
        /** @hidden */
        function dispatchGamepadEvent(type, data, initHandled) {
            if (initHandled === void 0) { initHandled = false; }
            var e = document.createEvent("CustomEvent");
            e.initCustomEvent(type, true, true, undefined);
            Object.keys(data).forEach(function (key) {
                e[key] = data[key];
            });
            if (initHandled) {
                e.preventDefault();
            }
            return (document.activeElement || document.body).dispatchEvent(e);
        }
        /** @hidden */
        var dispatchAnyEvents = true;
        /** @hidden */
        var oldPads = [];
        /** @hidden */
        function implPollEvents(options) {
            if (!dispatchAnyEvents)
                return;
            var newPads = gamepad.getGamepads({ deadZone: 0, keepInactive: true, keepNonstandard: true, keepNull: true, standardize: true });
            var nPads = Math.max(oldPads.length, newPads.length);
            for (var iPad = 0; iPad < nPads; ++iPad) {
                var oldPad = oldPads[iPad];
                var newPad = newPads[iPad];
                if (oldPad && (!newPad || newPad.id !== oldPad.id || newPad.index !== oldPad.index)) {
                    dispatchGamepadEvent("mmk-gamepad-disconnected", { gamepadType: gamepad.metadata.getDeviceType(oldPad), gamepadIndex: oldPad.index, connected: false });
                }
                if (newPad && (!oldPad || newPad.id !== oldPad.id || newPad.index !== oldPad.index)) {
                    dispatchGamepadEvent("mmk-gamepad-connected", { gamepadType: gamepad.metadata.getDeviceType(newPad), gamepadIndex: newPad.index, connected: true });
                }
                var eventPad = newPad || oldPad;
                if (!eventPad)
                    continue;
                var gamepadType = gamepad.metadata.getDeviceType(eventPad);
                var gamepadIndex = eventPad.index;
                var nButtons = Math.max(newPad ? newPad.buttons.length : 0, oldPad ? oldPad.buttons.length : 0);
                for (var buttonIndex = 0; buttonIndex < nButtons; ++buttonIndex) {
                    var oldButtonPressed = (oldPad && buttonIndex < oldPad.buttons.length && oldPad.buttons[buttonIndex].pressed) || false;
                    var newButtonPressed = (newPad && buttonIndex < newPad.buttons.length && newPad.buttons[buttonIndex].pressed) || false;
                    var oldButtonValue = (oldPad && buttonIndex < oldPad.buttons.length) ? oldPad.buttons[buttonIndex].value : 0;
                    var newButtonValue = (newPad && buttonIndex < newPad.buttons.length) ? newPad.buttons[buttonIndex].value : 0;
                    var held = newButtonPressed;
                    var buttonValue = newButtonValue;
                    var handled = false;
                    if (newButtonPressed && !oldButtonPressed) {
                        handled = dispatchGamepadEvent("mmk-gamepad-button-down", { gamepadType: gamepadType, gamepadIndex: gamepadIndex, buttonIndex: buttonIndex, buttonValue: buttonValue, held: held });
                    }
                    else if (!newButtonPressed && oldButtonPressed) {
                        handled = dispatchGamepadEvent("mmk-gamepad-button-up", { gamepadType: gamepadType, gamepadIndex: gamepadIndex, buttonIndex: buttonIndex, buttonValue: buttonValue, held: held });
                    }
                    if ((newButtonValue !== oldButtonValue) || (newButtonPressed !== oldButtonPressed)) {
                        dispatchGamepadEvent("mmk-gamepad-button-value", { gamepadType: gamepadType, gamepadIndex: gamepadIndex, buttonIndex: buttonIndex, buttonValue: buttonValue, held: held }, handled);
                    }
                }
                var nAxises = Math.max(newPad ? newPad.axes.length : 0, oldPad ? oldPad.axes.length : 0);
                for (var axisIndex = 0; axisIndex < nAxises; ++axisIndex) {
                    var oldAxisValue = (oldPad && axisIndex < oldPad.axes.length) ? oldPad.axes[axisIndex] : 0;
                    var axisValue = (newPad && axisIndex < newPad.axes.length) ? newPad.axes[axisIndex] : 0;
                    if (oldAxisValue === axisValue)
                        continue;
                    dispatchGamepadEvent("mmk-gamepad-axis-value", { gamepadType: gamepadType, gamepadIndex: gamepadIndex, axisIndex: axisIndex, axisValue: axisValue });
                }
            }
            oldPads = mmk.gamepad.cloneGamepads(newPads);
        }
        /** @hidden */
        var autoDispatchEvents = true;
        if (!("addEventListener" in window)) {
            dispatchAnyEvents = false;
            console.warn("addEventListener unavailable, assuming this browser doesn't support the gamepads API anyways");
        }
        else
            addEventListener("load", function () {
                gamepad.poll(function () {
                    if (autoDispatchEvents) {
                        implPollEvents(defaultOptions);
                    }
                });
            });
        /**
         * Poll gamepad state, and dispatch events based on that state.
         * Note that mmk.gamepad will automatically dispatch by default based on one of:
         * ```ts
         *     requestAnimationFrame(...)
         *     setInterval(..., 10)
         * ```
         * And that calling this method will disable that automatic dispatch mechanism.
         *
         * @param options Allows some customization of if e.g. deadzones are applied to generated events or not.
         */
        function pollEvents(options) {
            autoDispatchEvents = false;
            implPollEvents(options || defaultOptions);
        }
        gamepad.pollEvents = pollEvents;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
// https://docs.microsoft.com/en-us/windows/uwp/xbox-apps/how-to-disable-mouse-mode
navigator.gamepadInputEmulation = "gamepad";
// See mmk.gamepad.settings.captureGamepadEvents doc comments
if ('addEventListener' in window) {
    // We might consider bypassing polling for button events on Microsoft Edge in favor of keydown/up events.
    // This would let us have "mmk-gamepad-button-down" being .preventDefault()ed cause the actual keydown event
    // to also be .preventDefault()ed, instead of relying on global boolean state.  Open questions include how
    // to handle thumbstick/trigger events...
    addEventListener("keydown", function (ev) {
        switch (ev.key) {
            case "GamepadA":
            case "GamepadB":
            case "GamepadX":
            case "GamepadY":
            case "GamepadLeftThumbstick": // Click
            case "GamepadLeftThumbstickUp":
            case "GamepadLeftThumbstickDown":
            case "GamepadLeftThumbstickLeft":
            case "GamepadLeftThumbstickRight":
            case "GamepadRightThumbstick": // Click
            case "GamepadRightThumbstickUp":
            case "GamepadRightThumbstickDown":
            case "GamepadRightThumbstickLeft":
            case "GamepadRightThumbstickRight":
            case "GamepadDPadUp":
            case "GamepadDPadDown":
            case "GamepadDPadLeft":
            case "GamepadDPadRight":
            case "GamepadLeftShoulder":
            case "GamepadRightShoulder":
            case "GamepadLeftTrigger":
            case "GamepadRightTrigger":
            // We have no way to handle the guide button on Windows 10 + Microsoft Edge
            case "GamepadView": // Back
            case "GamepadMenu": // Start
                if (mmk.gamepad.config.captureGamepadEvents) {
                    ev.preventDefault();
                }
                break;
        }
    }, true);
}
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /** @hidden */
        function v(value, fallback) {
            return (value === undefined) ? fallback : value;
        }
        /** @hidden */
        function stickDeadZone(x, y, dz) {
            if (dz <= 0)
                return [x, y];
            if (dz >= 1)
                return [0, 0];
            var m2 = x * x + y * y;
            if (m2 <= dz * dz)
                return [0, 0];
            var m = Math.sqrt(m2); // current magnitude
            var t = (m - dz) / (1 - dz); // target magnitude
            if (t < 0)
                t = 0;
            var s = t / m; // scale
            return [x * s, y * s];
        }
        /** @hidden */
        function cloneDeadZone(original, dz) {
            var clone = gamepad.cloneGamepad(original);
            if (clone.mapping === "standard") {
                var leftX = clone.axes[0];
                var leftY = clone.axes[1];
                var rightX = clone.axes[2];
                var rightY = clone.axes[3];
                var leftThumbDZ = stickDeadZone(leftX, leftY, dz);
                var rightThumbDZ = stickDeadZone(rightX, rightY, dz);
                clone.axes[0] = leftThumbDZ[0];
                clone.axes[1] = leftThumbDZ[1];
                clone.axes[2] = rightThumbDZ[0];
                clone.axes[3] = rightThumbDZ[1];
            }
            return clone;
        }
        /** @hidden */
        function isActive(g) {
            return g.axes.some(function (a) { return a !== 0; }) || g.buttons.some(function (b) { return b.pressed || b.touched; });
        }
        function getGamepads(options) {
            var gamepads = gamepad.getRawGamepads();
            if (!options.keepNull)
                gamepads = gamepads.filter(function (g) { return g !== null; });
            if (options.standardize)
                gamepads = gamepads.map(function (g) { return gamepad.tryRemapStdLayout(g) || g; });
            if (!options.keepNonstandard)
                gamepads = gamepads.filter(function (g) { return g ? g.mapping === "standard" : g; });
            if (options.deadZone)
                gamepads = gamepads.map(function (g) { return g ? cloneDeadZone(g, options.deadZone) : g; });
            if (!options.keepInactive)
                gamepads = gamepads.filter(function (g) { return g ? isActive(g) : false; });
            return gamepads;
        }
        gamepad.getGamepads = getGamepads;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /**
         * Returns `true` if the browser seems to provide the gamepad APIs mmk.gamepad relies on for actual input.
         * This isn't 100% accurate, Chromium on Linux has been known to define the APIs but not implement them.
         *
         * `mmk.gamepad` methods should generally still "work" (e.g. noop) even if the underlying browser APIs are missing,
         * this method mostly exists to hint that you might not want to bother showing gamepad specific hints, or might want
         * to suggest a gamepad-enabled browser, depending on your game.
         */
        function isSupported() {
            if ('getGamepads' in navigator)
                return true;
            if ('onconnectedgamepad' in window)
                return true;
            return false;
        }
        gamepad.isSupported = isSupported;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad_1) {
        /** @hidden */
        var assert = console.assert;
        /** @hidden */
        function remapXformHat(condition) {
            return function (src, remap) {
                var i = src ? Math.round((src.value + 1) / 2 * 7) : 8;
                var v = condition(i);
                return { value: v ? 1.0 : 0.0, pressed: v, touched: v };
            };
        }
        /** @hidden */
        var axisXforms = {
            "01-11": function (src, remap) {
                var value = src ? (src.value * 2) - 1 : 0;
                return { value: value, pressed: false, touched: false };
            }
        };
        /** @hidden */
        var buttonXforms = {
            "constant": function (src, remap) {
                var value = remap.param || 0;
                var pressed = false;
                return { value: value, pressed: pressed, touched: pressed };
            },
            "11-01": function (src, remap) {
                var value = src ? (src.value + 1) / 2 : 0;
                var pressed = !remap.param ? src.pressed : (value > remap.param);
                return { value: value, pressed: pressed, touched: pressed };
            },
            "11-10": function (src, remap) {
                var value = src ? (-src.value + 1) / 2 : 0;
                var pressed = !remap.param ? src.pressed : (value > remap.param);
                return { value: value, pressed: pressed, touched: pressed };
            },
            "axis-negative-01": function (src, remap) {
                var value = (src && src.value < 0.0) ? -src.value : 0.0;
                var pressed = value > (remap.param ? remap.param : 0.0);
                return { value: value, pressed: pressed, touched: pressed };
            },
            "axis-positive-01": function (src, remap) {
                var value = (src && src.value > 0.0) ? +src.value : 0.0;
                var pressed = value > (remap.param ? remap.param : 0.0);
                return { value: value, pressed: pressed, touched: pressed };
            },
            "hat-up-bit": remapXformHat(function (i) { return (i === 7) || (i === 0) || (i === 1); }),
            "hat-right-bit": remapXformHat(function (i) { return (1 <= i) && (i <= 3); }),
            "hat-down-bit": remapXformHat(function (i) { return (3 <= i) && (i <= 5); }),
            "hat-left-bit": remapXformHat(function (i) { return (5 <= i) && (i <= 7); })
        };
        // Avoid where possible.
        /** @hidden */
        var xxxIsLinux = /\blinux\b/i.test(navigator.userAgent);
        /** @hidden */
        var xxxIsChromeBased = /\bChrome\/\d{2,3}\b/i.test(navigator.userAgent);
        /** @hidden */
        var xxxIsChromium = /\bChromium\/\d{2,3}\b/i.test(navigator.userAgent);
        /** @hidden */
        var xxxIsChrome = xxxIsChromeBased && !xxxIsChromium;
        /** @hidden */
        var liesAboutStandardMapping = xxxIsLinux && xxxIsChromeBased;
        function tryRemapStdLayout(gamepad) {
            if (!gamepad)
                return gamepad;
            if (!liesAboutStandardMapping && gamepad.mapping === "standard")
                return gamepad; // Already remapped
            if (gamepad.mapping === "-custom")
                return gamepad; // Already remapped
            var remapGamepad = gamepad_1.metadata.findRemap(gamepad);
            if (!remapGamepad)
                return gamepad;
            var flatGamepad = gamepad_1.flattenPremapGamepad(gamepad);
            var fakey = {
                id: gamepad.id,
                displayId: gamepad.displayId,
                index: gamepad.index,
                timestamp: gamepad.timestamp,
                connected: gamepad.connected,
                mapping: remapGamepad.mapping,
                axes: new Array(remapGamepad.axes.length),
                buttons: new Array(remapGamepad.buttons.length)
            };
            for (var i = 0; i < remapGamepad.axes.length; ++i) {
                var remapAxis = remapGamepad.axes[i];
                if (remapAxis === undefined) {
                    fakey.axes[i] = 0.0;
                }
                else if (remapAxis.xform === undefined) {
                    var flatAxis = flatGamepad[remapAxis.src];
                    assert(!!flatAxis);
                    fakey.axes[i] = flatAxis ? flatAxis.value : 0.0;
                }
                else { // remap
                    var flatAxis = flatGamepad[remapAxis.src];
                    var remapXform = axisXforms[remapAxis.xform];
                    assert(!!flatAxis);
                    assert(!!remapXform);
                    fakey.axes[i] = remapXform(flatAxis, remapAxis).value;
                }
            }
            for (var i = 0; i < remapGamepad.buttons.length; ++i) {
                var remapButton = remapGamepad.buttons[i];
                if (remapButton === undefined) {
                    fakey.buttons[i] = { value: 0.0, pressed: false, touched: false };
                }
                else if (remapButton.xform === undefined) {
                    var flatButton = flatGamepad[remapButton.src];
                    assert(!!flatButton);
                    fakey.buttons[i] = flatButton ? flatButton : { value: 0.0, pressed: false, touched: false };
                }
                else { // remap
                    var flatButton = flatGamepad[remapButton.src];
                    var remapXform = buttonXforms[remapButton.xform];
                    assert(!!flatButton);
                    assert(!!remapXform);
                    fakey.buttons[i] = remapXform(flatButton, remapButton);
                }
            }
            return fakey;
        }
        gamepad_1.tryRemapStdLayout = tryRemapStdLayout;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /**
         * Dual Shock / Sony Button values in the standard mapping layout.
         *
         * Main values are:
         * `Cross`,
         * `Circle`,
         * `Square`,
         * `Triangle`,
         * `LeftShoulder`,
         * `RightShoulder`,
         * `LeftTrigger`,
         * `RightTrigger`,
         * `Select`,
         * `Start`,
         * `LeftThumb`,
         * `RightThumb`,
         * `DirectionalPadUp`,
         * `DirectionalPadDown`,
         * `DirectionalPadLeft`,
         * `DirectionalPadRight`
         *
         * Additionally, there are a few shorthand aliases - `LeftShoulder` has `LShoulder`, `DirectionalPadLeft` has
         * `DPadLeft` - and `Select`/`Start` have DS4 aliases `Share`/`Options`.
         *
         * Finally, the hideously and unfixably nonportable `_PlayStationLogo` button can be used.
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
         * - https://w3c.github.io/gamepad/#dom-gamepad-buttons
         */
        var DualShockButton;
        (function (DualShockButton) {
            DualShockButton[DualShockButton["Cross"] = 0] = "Cross";
            DualShockButton[DualShockButton["Circle"] = 1] = "Circle";
            DualShockButton[DualShockButton["Square"] = 2] = "Square";
            DualShockButton[DualShockButton["Triangle"] = 3] = "Triangle";
            DualShockButton[DualShockButton["LeftShoulder"] = 4] = "LeftShoulder";
            DualShockButton[DualShockButton["RightShoulder"] = 5] = "RightShoulder";
            DualShockButton[DualShockButton["LeftTrigger"] = 6] = "LeftTrigger";
            DualShockButton[DualShockButton["RightTrigger"] = 7] = "RightTrigger";
            DualShockButton[DualShockButton["Select"] = 8] = "Select";
            DualShockButton[DualShockButton["Start"] = 9] = "Start";
            DualShockButton[DualShockButton["LeftThumb"] = 10] = "LeftThumb";
            DualShockButton[DualShockButton["RightThumb"] = 11] = "RightThumb";
            DualShockButton[DualShockButton["DirectionalPadUp"] = 12] = "DirectionalPadUp";
            DualShockButton[DualShockButton["DirectionalPadDown"] = 13] = "DirectionalPadDown";
            DualShockButton[DualShockButton["DirectionalPadLeft"] = 14] = "DirectionalPadLeft";
            DualShockButton[DualShockButton["DirectionalPadRight"] = 15] = "DirectionalPadRight";
            /** AVOID.  This is unavailable on many browsers, and even if available, likely triggers other software like Steam or built in Windows 10 stuff. */
            DualShockButton[DualShockButton["_PlayStationLogo"] = 16] = "_PlayStationLogo";
            // Extra Aliases
            DualShockButton[DualShockButton["LShoulder"] = 4] = "LShoulder";
            DualShockButton[DualShockButton["RShoulder"] = 5] = "RShoulder";
            DualShockButton[DualShockButton["LTrigger"] = 6] = "LTrigger";
            DualShockButton[DualShockButton["RTrigger"] = 7] = "RTrigger";
            DualShockButton[DualShockButton["LThumb"] = 10] = "LThumb";
            DualShockButton[DualShockButton["RThumb"] = 11] = "RThumb";
            DualShockButton[DualShockButton["DPadUp"] = 12] = "DPadUp";
            DualShockButton[DualShockButton["DPadDown"] = 13] = "DPadDown";
            DualShockButton[DualShockButton["DPadLeft"] = 14] = "DPadLeft";
            DualShockButton[DualShockButton["DPadRight"] = 15] = "DPadRight";
            // Sony terminology / aliases
            DualShockButton[DualShockButton["L1"] = 4] = "L1";
            DualShockButton[DualShockButton["L2"] = 6] = "L2";
            DualShockButton[DualShockButton["L3"] = 10] = "L3";
            DualShockButton[DualShockButton["R1"] = 5] = "R1";
            DualShockButton[DualShockButton["R2"] = 7] = "R2";
            DualShockButton[DualShockButton["R3"] = 11] = "R3";
            // DS4 terminology / aliases
            DualShockButton[DualShockButton["Share"] = 8] = "Share";
            DualShockButton[DualShockButton["Options"] = 9] = "Options";
        })(DualShockButton = gamepad.DualShockButton || (gamepad.DualShockButton = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /**
         * Gamepad axes for the `"standard"` gamepad `mapping`.  This means only the thumbsticks, not any triggers.
         *
         * Per https://w3c.github.io/gamepad/#remapping this contains:
         *
         * - `LeftStickRight`,  `LeftStickX`,  `LStickX` (axis 0)
         * - `LeftStickDown`,   `LeftStickY`,  `LStickY` (axis 1)
         * - `RightStickRight`, `RightStickX`, `RStickX` (axis 2)
         * - `RightStickDown`,  `RightStickY`, `RStickY` (axis 3)
         */
        var StandardAxis;
        (function (StandardAxis) {
            /** The left stick's X axis.  Right is positive, left is negative. */
            StandardAxis[StandardAxis["LeftStickRight"] = 0] = "LeftStickRight";
            /** The left stick's Y axis.  Down is positive, up is negative. */
            StandardAxis[StandardAxis["LeftStickDown"] = 1] = "LeftStickDown";
            /** The right stick's X axis.  Right is positive, left is negative. */
            StandardAxis[StandardAxis["RightStickRight"] = 2] = "RightStickRight";
            /** The right stick's Y axis.  Down is positive, up is negative. */
            StandardAxis[StandardAxis["RightStickDown"] = 3] = "RightStickDown";
            /** The left stick's X axis.  Right is positive, left is negative. */
            StandardAxis[StandardAxis["LeftStickX"] = 0] = "LeftStickX";
            /** The left stick's Y axis.  Down is positive, up is negative. */
            StandardAxis[StandardAxis["LeftStickY"] = 1] = "LeftStickY";
            /** The right stick's X axis.  Right is positive, left is negative. */
            StandardAxis[StandardAxis["RightStickX"] = 2] = "RightStickX";
            /** The right stick's Y axis.  Down is positive, up is negative. */
            StandardAxis[StandardAxis["RightStickY"] = 3] = "RightStickY";
            /** The left stick's X axis.  Right is positive, left is negative. */
            StandardAxis[StandardAxis["LStickX"] = 0] = "LStickX";
            /** The left stick's Y axis.  Down is positive, up is negative. */
            StandardAxis[StandardAxis["LStickY"] = 1] = "LStickY";
            /** The right stick's X axis.  Right is positive, left is negative. */
            StandardAxis[StandardAxis["RStickX"] = 2] = "RStickX";
            /** The right stick's Y axis.  Down is positive, up is negative. */
            StandardAxis[StandardAxis["RStickY"] = 3] = "RStickY";
        })(StandardAxis = gamepad.StandardAxis || (gamepad.StandardAxis = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /**
         * Xbox Button values in the standard mapping layout.
         *
         * Main values are:
         * `A`,
         * `B`,
         * `X`,
         * `Y`,
         * `LeftShoulder`,
         * `RightShoulder`,
         * `LeftTrigger`,
         * `RightTrigger`,
         * `Back`,
         * `Start`,
         * `LeftThumb`,
         * `RightThumb`,
         * `DirectionalPadUp`,
         * `DirectionalPadDown`,
         * `DirectionalPadLeft`,
         * `DirectionalPadRight`
         *
         * Additionally, there are a few shorthand aliases - `LeftShoulder` has `LShoulder`, `DirectionalPadLeft` has
         * `DPadLeft` - and `Back`/`Start` have XB1 aliases `View`/`Menu`.
         *
         * Finally, the hideously and unfixably nonportable `_Guide` button can be used.
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
         * - https://w3c.github.io/gamepad/#dom-gamepad-buttons
         */
        var XboxButton;
        (function (XboxButton) {
            XboxButton[XboxButton["A"] = 0] = "A";
            XboxButton[XboxButton["B"] = 1] = "B";
            XboxButton[XboxButton["X"] = 2] = "X";
            XboxButton[XboxButton["Y"] = 3] = "Y";
            XboxButton[XboxButton["LeftShoulder"] = 4] = "LeftShoulder";
            XboxButton[XboxButton["RightShoulder"] = 5] = "RightShoulder";
            XboxButton[XboxButton["LeftTrigger"] = 6] = "LeftTrigger";
            XboxButton[XboxButton["RightTrigger"] = 7] = "RightTrigger";
            XboxButton[XboxButton["Back"] = 8] = "Back";
            XboxButton[XboxButton["Start"] = 9] = "Start";
            XboxButton[XboxButton["LeftThumb"] = 10] = "LeftThumb";
            XboxButton[XboxButton["RightThumb"] = 11] = "RightThumb";
            XboxButton[XboxButton["DirectionalPadUp"] = 12] = "DirectionalPadUp";
            XboxButton[XboxButton["DirectionalPadDown"] = 13] = "DirectionalPadDown";
            XboxButton[XboxButton["DirectionalPadLeft"] = 14] = "DirectionalPadLeft";
            XboxButton[XboxButton["DirectionalPadRight"] = 15] = "DirectionalPadRight";
            /** AVOID.  This is unavailable on many browsers, and even if available, likely triggers other software like Steam or built in Windows 10 stuff. */
            XboxButton[XboxButton["_Guide"] = 16] = "_Guide";
            // Extra Aliases
            XboxButton[XboxButton["LShoulder"] = 4] = "LShoulder";
            XboxButton[XboxButton["RShoulder"] = 5] = "RShoulder";
            XboxButton[XboxButton["LTrigger"] = 6] = "LTrigger";
            XboxButton[XboxButton["RTrigger"] = 7] = "RTrigger";
            XboxButton[XboxButton["LThumb"] = 10] = "LThumb";
            XboxButton[XboxButton["RThumb"] = 11] = "RThumb";
            XboxButton[XboxButton["DPadUp"] = 12] = "DPadUp";
            XboxButton[XboxButton["DPadDown"] = 13] = "DPadDown";
            XboxButton[XboxButton["DPadLeft"] = 14] = "DPadLeft";
            XboxButton[XboxButton["DPadRight"] = 15] = "DPadRight";
            // XB1 terminology / aliases
            XboxButton[XboxButton["View"] = 8] = "View";
            XboxButton[XboxButton["Menu"] = 9] = "Menu";
        })(XboxButton = gamepad.XboxButton || (gamepad.XboxButton = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad_2) {
        /** @hidden */
        function flattenPremapGamepad(gamepad) {
            var map = {};
            for (var i = 0; i < gamepad.axes.length; ++i) {
                var a = gamepad.axes[i];
                var id = "a" + i;
                map[id] = { value: a, pressed: false, touched: false };
            }
            for (var i = 0; i < gamepad.buttons.length; ++i) {
                var b = gamepad.buttons[i];
                var id = "b" + i;
                map[id] = { value: b.value, pressed: b.pressed, touched: b.touched };
            }
            return map;
        }
        gamepad_2.flattenPremapGamepad = flattenPremapGamepad;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad_3) {
        /** @hidden */
        function ro(value) { return value; }
        /** @hidden */
        function getRawGamepads() {
            var e_1, _a;
            if ('getGamepads' in navigator) {
                var gp = navigator.getGamepads();
                var a = [];
                try {
                    for (var gp_1 = __values(gp), gp_1_1 = gp_1.next(); !gp_1_1.done; gp_1_1 = gp_1.next()) {
                        var gamepad = gp_1_1.value;
                        if (!gamepad) {
                            a.push(gamepad);
                        }
                        else {
                            a.push(ro(gamepad));
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (gp_1_1 && !gp_1_1.done && (_a = gp_1["return"])) _a.call(gp_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return a;
            }
            else {
                return [];
            }
        }
        gamepad_3.getRawGamepads = getRawGamepads;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /** @hidden */
        function parseGamepadId_Blink(id) {
            var mNameParen = /^(.+?)(?: \((.*)\))$/i.exec(id);
            if (!mNameParen)
                return undefined;
            var parsed = { name: mNameParen[1], vendor: "", product: "", hint: "blink" };
            var mVendorProduct = /(?:^| )Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})$/i.exec(mNameParen[2]);
            if (mVendorProduct) {
                parsed.vendor = mVendorProduct[1];
                parsed.product = mVendorProduct[2];
            }
            return parsed;
        }
        /** @hidden */
        function parseGamepadId_Gecko(id) {
            if (id === "xinput")
                return { name: "xinput", vendor: "", product: "", hint: "gecko" };
            var m = /^([0-9a-f]{4})-([0-9a-f]{4})-(.+)$/gi.exec(id);
            if (m)
                return { name: m[3], vendor: m[1], product: m[2], hint: "gecko" };
            return undefined;
        }
        /** @hidden */
        function parseGamepadId_Unknown(id) {
            // TODO: Scan for other 4-byte hex strings?
            return { name: id, vendor: "", product: "", hint: "unknown" };
        }
        /**
         * Attempt to decompose a [[Gamepad.id]].  The exact layout of the [[Gamepad.id]] is hideously browser specific,
         * non-portable, brittle, and generally badwrong to rely upon... but it's also my least bad option for identifying
         * specific gamepads and applying gamepad/browser/OS specific workarounds and fixes for the raw
         * `navigator.getGamepad()` results.  Some examples:
         *
         * ```ts
         * parseGamepadId(undefined) => { name: "unknown", vendor: "", product: "", hint: "unknown" }
         * parseGamepadId(""       ) => { name: "unknown", vendor: "", product: "", hint: "unknown" }
         * parseGamepadId("asdf"   ) => { name: "asdf",    vendor: "", product: "", hint: "unknown" }
         * parseGamepadId("xinput" ) => { name: "xinput",  vendor: "", product: "", hint: "gecko"   }
         *
         * parseGamepadId("054c-0ba0-DUALSHOCK®4 USB Wireless Adaptor") => {
         *     name:    "DUALSHOCK®4 USB Wireless Adaptor",
         *     vendor:  "054c",
         *     product: "0ba0",
         *     hint:    "gecko"
         * }
         *
         * parseGamepadId("DUALSHOCK®4 USB Wireless Adaptor (Vendor: 054c Product: 0ba0)") => {
         *     name:    "DUALSHOCK®4 USB Wireless Adaptor",
         *     vendor:  "054c",
         *     product: "0ba0",
         *     hint:    "blink"
         * }
         * ```
         *
         * If you encounter new and exciting [[Gamepad.id]] schemas, please send them my way!
         *
         * See also:
         * - [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id) on [[Gamepad.id]]
         * - [W3C Editor's Draft](https://w3c.github.io/gamepad/#dom-gamepad-id) on [[Gamepad.id]]
         *
         * @param id The [[Gamepad.id]] to try and parse.
         */
        function parseGamepadId(id) {
            if (!id)
                return parseGamepadId_Unknown("unknown");
            var parsed = parseGamepadId_Blink(id) || parseGamepadId_Gecko(id) || parseGamepadId_Unknown(id);
            return parsed;
        }
        gamepad.parseGamepadId = parseGamepadId;
        /** @hidden */
        var parsedIdExamples = [
            // Chrome / Opera
            ["Xbox 360 Controller (XInput STANDARD GAMEPAD)", { name: "Xbox 360 Controller", vendor: "", product: "", hint: "blink" }],
            ["DUALSHOCK®4 USB Wireless Adaptor (Vendor: 054c Product: 0ba0)", { name: "DUALSHOCK®4 USB Wireless Adaptor", vendor: "054c", product: "0ba0", hint: "blink" }],
            ["Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)", { name: "Wireless Controller", vendor: "054c", product: "09cc", hint: "blink" }],
            // Firefox
            ["xinput", { name: "xinput", vendor: "", product: "", hint: "gecko" }],
            ["054c-0ba0-DUALSHOCK®4 USB Wireless Adaptor", { name: "DUALSHOCK®4 USB Wireless Adaptor", vendor: "054c", product: "0ba0", hint: "gecko" }],
            ["054c-09cc-Wireless Controller", { name: "Wireless Controller", vendor: "054c", product: "09cc", hint: "gecko" }],
            // Not actually seen
            [undefined, { name: "unknown", vendor: "", product: "", hint: "unknown" }],
            ["asdf", { name: "asdf", vendor: "", product: "", hint: "unknown" }],
            ["", { name: "unknown", vendor: "", product: "", hint: "unknown" }],
        ];
        parsedIdExamples.forEach(function (example) {
            var parsed = JSON.stringify(parseGamepadId(example[0]));
            var expected = JSON.stringify(example[1]);
            console.assert(parsed === expected, "Expected parsed:", parsed, "equal to expected:", expected);
        });
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        /** @hidden */
        function poll(action) {
            if ('requestAnimationFrame' in window) {
                var perFrame = function () {
                    window.requestAnimationFrame(perFrame);
                    action();
                };
                window.requestAnimationFrame(perFrame);
            }
            else {
                setInterval(action, 10); // 100Hz... good enough?
            }
        }
        gamepad.poll = poll;
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad_4) {
        var metadata;
        (function (metadata) {
            var axises = {};
            function regsiterAxises(newAxises) {
                for (var id in newAxises) {
                    var value = newAxises[id];
                    console.assert(!(id in axises));
                    axises[id] = value;
                }
            }
            metadata.regsiterAxises = regsiterAxises;
            function getAxisLabel(id, locHint) {
                var e_2, _a;
                if (locHint === void 0) { locHint = navigator.languages; }
                var axis = axises[id];
                try {
                    for (var locHint_1 = __values(locHint), locHint_1_1 = locHint_1.next(); !locHint_1_1.done; locHint_1_1 = locHint_1.next()) {
                        var lang = locHint_1_1.value;
                        if (lang.indexOf('-') === -1)
                            continue;
                        if (lang in axis)
                            return axis[lang];
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (locHint_1_1 && !locHint_1_1.done && (_a = locHint_1["return"])) _a.call(locHint_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return "Unlocalized Axis " + JSON.stringify(id);
            }
            metadata.getAxisLabel = getAxisLabel;
            function getGamepadAxisLabel(gamepad, index, locHint) {
                if (locHint === void 0) { locHint = navigator.languages; }
                var a = metadata.getDeviceAxises(gamepad);
                return (0 <= index && index < a.length) ? getAxisLabel(a[index], locHint) : undefined;
            }
            metadata.getGamepadAxisLabel = getGamepadAxisLabel;
        })(metadata = gamepad_4.metadata || (gamepad_4.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad_5) {
        var metadata;
        (function (metadata) {
            var buttons = {};
            function registerButtons(newButtons) {
                for (var id in newButtons) {
                    var value = newButtons[id];
                    console.assert(!(id in buttons));
                    buttons[id] = (typeof value === "string") ? { "fallback": value } : value;
                }
            }
            metadata.registerButtons = registerButtons;
            function getButtonLabel(id, locHint) {
                var e_3, _a;
                if (locHint === void 0) { locHint = navigator.languages; }
                for (var button = buttons[id]; button;) {
                    try {
                        for (var locHint_2 = (e_3 = void 0, __values(locHint)), locHint_2_1 = locHint_2.next(); !locHint_2_1.done; locHint_2_1 = locHint_2.next()) {
                            var lang = locHint_2_1.value;
                            if (lang.indexOf('-') === -1)
                                continue;
                            if (lang in button)
                                return button[lang];
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (locHint_2_1 && !locHint_2_1.done && (_a = locHint_2["return"])) _a.call(locHint_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    if (!("fallback" in button))
                        break;
                    var old = button;
                    button = buttons[button.fallback];
                    if (!button)
                        return JSON.stringify(id) + " w/ missing fallback " + JSON.stringify(old.fallback);
                }
                return "Unlocalized Button " + JSON.stringify(id);
            }
            metadata.getButtonLabel = getButtonLabel;
            function getGamepadButtonLabel(gamepad, index, locHint) {
                if (locHint === void 0) { locHint = navigator.languages; }
                var b = metadata.getDeviceButtons(gamepad);
                return (0 <= index && index < b.length) ? getButtonLabel(b[index], locHint) : undefined;
            }
            metadata.getGamepadButtonLabel = getGamepadButtonLabel;
        })(metadata = gamepad_5.metadata || (gamepad_5.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            var deviceTypes = {};
            function registerDeviceType(deviceType, information) {
                console.assert(!(deviceType in deviceTypes));
                deviceTypes[deviceType] = information;
            }
            metadata.registerDeviceType = registerDeviceType;
            var devices = {};
            function registerDevice(vendorId, productId, deviceType, description) {
                var id = vendorId + "-" + productId;
                console.assert(!(id in devices));
                devices[id] = { deviceType: deviceType, description: description };
            }
            metadata.registerDevice = registerDevice;
            function isGamepad(target) { return !(("vendor" in target) && ("product" in target)); }
            function isDeviceType(target) { return typeof target === "string"; }
            function ids(target) { return isGamepad(target) ? gamepad.parseGamepadId(target.id) : target; }
            function vpid(target) {
                var _a = ids(target), vendor = _a.vendor, product = _a.product;
                return vendor + "-" + product;
            }
            function getDeviceLabel(target, locHint) {
                var e_4, _a;
                if (locHint === void 0) { locHint = navigator.languages; }
                var device = devices[vpid(target)];
                if (!device)
                    return isGamepad(target) ? target.id : "Unknown Device " + JSON.stringify(target);
                try {
                    for (var locHint_3 = __values(locHint), locHint_3_1 = locHint_3.next(); !locHint_3_1.done; locHint_3_1 = locHint_3.next()) {
                        var lang = locHint_3_1.value;
                        if (lang in device.description)
                            return device.description[lang];
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (locHint_3_1 && !locHint_3_1.done && (_a = locHint_3["return"])) _a.call(locHint_3);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                return device.description["en-US"]; // Final fallback
            }
            metadata.getDeviceLabel = getDeviceLabel;
            function getDeviceType(target) {
                if (isDeviceType(target))
                    return target;
                var device = devices[vpid(target)];
                return device ? device.deviceType
                    : (isGamepad(target) && target.mapping === "standard") ? "gamepad-unknown"
                        : "unknown-unknown";
            }
            metadata.getDeviceType = getDeviceType;
            function getDeviceButtons(target) {
                var type = deviceTypes[getDeviceType(target)];
                if (!type)
                    return []; // Unknown as heck
                return type.buttons;
            }
            metadata.getDeviceButtons = getDeviceButtons;
            function getDeviceAxises(target) {
                var type = deviceTypes[getDeviceType(target)];
                if (!type)
                    return []; // Unknown as heck
                return type.axises;
            }
            metadata.getDeviceAxises = getDeviceAxises;
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad_6) {
        var metadata;
        (function (metadata) {
            /** @hidden */ var remapsList = [];
            /** @hidden */ var remapsByKey = {};
            function registerRemap(remap) {
                remapsList.push(remap);
                remap.matches.forEach(function (id) {
                    console.assert(!(id in remapsByKey), "Remaps contains multiple entries for the same mapping");
                    remapsByKey[id] = remap;
                });
            }
            metadata.registerRemap = registerRemap;
            /** @hidden */
            function getRemapKey(gamepad) {
                var id = gamepad_6.parseGamepadId(gamepad.id);
                var key = id.vendor + "-" + id.product + "-" + id.hint + "-" + gamepad.axes.length + "-" + gamepad.buttons.length;
                return key;
            }
            function findRemap(gamepad) {
                var key = getRemapKey(gamepad);
                var value = remapsByKey[key];
                return value;
            }
            metadata.findRemap = findRemap;
        })(metadata = gamepad_6.metadata || (gamepad_6.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-facepad-down": { "en-US": "Face Down (A?) Button" },
                "gamepad-facepad-right": { "en-US": "Face Right (B?) Button" },
                "gamepad-facepad-left": { "en-US": "Face Left (X?) Button" },
                "gamepad-facepad-up": { "en-US": "Face Up (Y?) Button" },
                "gamepad-left-bumper": { "en-US": "Left Bumper" },
                "gamepad-right-bumper": { "en-US": "Right Bumper" },
                "gamepad-left-trigger": { "en-US": "Left Trigger" },
                "gamepad-right-trigger": { "en-US": "Right Trigger" },
                "gamepad-face-left": { "en-US": "Left Face (Back)" },
                "gamepad-face-right": { "en-US": "Right Face (Start)" },
                "gamepad-logo": { "en-US": "Gamepad Logo" },
                "gamepad-left-stick-click": { "en-US": "Left Stick Click" },
                "gamepad-right-stick-click": { "en-US": "Right Stick Click" },
                "gamepad-dpad-up": { "en-US": "D-Pad Up" },
                "gamepad-dpad-down": { "en-US": "D-Pad Down" },
                "gamepad-dpad-left": { "en-US": "D-Pad Left" },
                "gamepad-dpad-right": { "en-US": "D-Pad Right" }
            });
            metadata.regsiterAxises({
                "gamepad-left-thumb-x": { "range": "11", "min": "left", "max": "right", "en-US": "Left Thumbstick X Axis", "stick": "gamepad-left-thumb" },
                "gamepad-left-thumb-y": { "range": "11", "min": "up", "max": "down", "en-US": "Left Thumbstick Y Axis", "stick": "gamepad-left-thumb" },
                "gamepad-right-thumb-x": { "range": "11", "min": "left", "max": "right", "en-US": "Right Thumbstick X Axis", "stick": "gamepad-right-thumb" },
                "gamepad-right-thumb-y": { "range": "11", "min": "up", "max": "down", "en-US": "Right Thumbstick Y Axis", "stick": "gamepad-right-thumb" }
            });
            metadata.registerDeviceType("gamepad-unknown", {
                "buttons": [
                    "gamepad-facepad-down",
                    "gamepad-facepad-right",
                    "gamepad-facepad-left",
                    "gamepad-facepad-up",
                    "gamepad-left-bumper",
                    "gamepad-right-bumper",
                    "gamepad-left-trigger",
                    "gamepad-right-trigger",
                    "gamepad-face-left",
                    "gamepad-face-right",
                    "gamepad-left-stick-click",
                    "gamepad-right-stick-click",
                    "gamepad-dpad-up",
                    "gamepad-dpad-down",
                    "gamepad-dpad-left",
                    "gamepad-dpad-right",
                    "gamepad-logo",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-ds3-cross": "gamepad-sony-cross",
                "gamepad-ds3-circle": "gamepad-sony-circle",
                "gamepad-ds3-square": "gamepad-sony-square",
                "gamepad-ds3-triangle": "gamepad-sony-triangle",
                "gamepad-ds3-l1": "gamepad-sony-l1",
                "gamepad-ds3-r1": "gamepad-sony-r1",
                "gamepad-ds3-l2": "gamepad-sony-l2",
                "gamepad-ds3-r2": "gamepad-sony-r2",
                "gamepad-ds3-select": "gamepad-sony-select",
                "gamepad-ds3-start": "gamepad-sony-start",
                "gamepad-ds3-playstation": "gamepad-sony-playstation",
                "gamepad-ds3-l3": "gamepad-sony-l3",
                "gamepad-ds3-r3": "gamepad-sony-r3"
            });
            metadata.registerDeviceType("gamepad-ds3", {
                "buttons": [
                    "gamepad-ds3-cross",
                    "gamepad-ds3-circle",
                    "gamepad-ds3-square",
                    "gamepad-ds3-triangle",
                    "gamepad-ds3-l1",
                    "gamepad-ds3-r1",
                    "gamepad-ds3-l2",
                    "gamepad-ds3-r2",
                    "gamepad-ds3-select",
                    "gamepad-ds3-start",
                    "gamepad-ds3-l3",
                    "gamepad-ds3-r3",
                    "gamepad-sony-dpad-up",
                    "gamepad-sony-dpad-down",
                    "gamepad-sony-dpad-left",
                    "gamepad-sony-dpad-right",
                    "gamepad-ds3-playstation",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
            metadata.registerDevice("054c", "0268", "gamepad-ds3", { "en-US": "DualShock 3 Controller" }); // aka "Sixaxis" / "PlayStation 3 Controller"
            metadata.registerRemap({
                "mapping": "standard",
                "tested": [
                    "Windows 10 / Chrome 75.0.3770.100",
                    "Windows 10 / Opera 60.0.3255.170",
                    "Windows 10 / Opera 62.0.3331.43"
                ],
                "matches": [
                    "054c-0268-blink-10-24",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a2" }, { "src": "a5" }],
                "buttons": [
                    { "src": "b2" }, { "src": "b1" }, { "src": "b3" }, { "src": "b0" },
                    { "src": "b6" }, { "src": "b7" }, { "src": "a3", "xform": "11-10", "param": 0.125 }, { "src": "a4", "xform": "11-10", "param": 0.125 },
                    { "src": "b9" }, { "src": "b8" }, { "src": "b10" }, { "src": "b11" },
                    { "src": "a9", "xform": "hat-up-bit" }, { "src": "a9", "xform": "hat-down-bit" }, { "src": "a9", "xform": "hat-left-bit" }, { "src": "a9", "xform": "hat-right-bit" },
                    // -- end of standard layout
                    { "src": "b12" },
                ]
            });
            // Note: Axis 6 is ignored (Maps to X button pressure - O button pressure is missing, so let's not support X either)
            // Note: Lots of buttons ignored (dead)
            metadata.registerRemap({
                "mapping": "standard",
                "tested": [
                    "Windows 10 / FireFox 67.0.2"
                ],
                "matches": [
                //"054c-0268-gecko-8-28", // DualShock 3 / "Sony PLAYSTATION(R)3 Controller"
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a2" }, { "src": "a5" }],
                // a6: X button pressure.  No axis for O button pressure.
                "buttons": [
                    { "src": "b2" }, { "src": "b1" }, { "src": "b3" }, { "src": "b0" },
                    { "src": "b6" }, { "src": "b7" }, { "src": "a3", "xform": "11-10", "param": 0.125 }, { "src": "a4", "xform": "11-10", "param": 0.125 },
                    { "src": "b9" }, { "src": "b8" }, { "src": "b10" }, { "src": "b11" },
                    { "src": "b13" }, { "src": "b14" }, { "src": "b15" }, { "src": "b16" },
                    // -- end of standard layout
                    { "src": "b12" },
                ]
            });
            // Note: Axis 6-7 are ignored (Both map to X button pressure - O button pressure is missing, so let's not support X either)
            // Note: Lots of buttons ignored (dead)
            metadata.registerRemap({
                "mapping": "standard",
                "tested": ["Ubuntu 18.04 LTS / Firefox 59.0.2"],
                "matches": [
                    "054c-0268-gecko-6-17",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a3" }, { "src": "a4" }],
                "buttons": [
                    { "src": "b0" }, { "src": "b1" }, { "src": "b3" }, { "src": "b2" },
                    { "src": "b4" }, { "src": "b5" }, { "src": "a2", "xform": "11-01", "param": 0.125 }, { "src": "a5", "xform": "11-01", "param": 0.125 },
                    { "src": "b8" }, { "src": "b9" }, { "src": "b11" }, { "src": "b12" },
                    { "src": "b13" }, { "src": "b14" }, { "src": "b15" }, { "src": "b16" },
                    // -- end of standard layout
                    { "src": "b10" },
                ]
            });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-ds4-cross": "gamepad-sony-cross",
                "gamepad-ds4-circle": "gamepad-sony-circle",
                "gamepad-ds4-square": "gamepad-sony-square",
                "gamepad-ds4-triangle": "gamepad-sony-triangle",
                "gamepad-ds4-l1": "gamepad-sony-l1",
                "gamepad-ds4-r1": "gamepad-sony-r1",
                "gamepad-ds4-l2": "gamepad-sony-l2",
                "gamepad-ds4-r2": "gamepad-sony-r2",
                "gamepad-ds4-share": { "fallback": "gamepad-sony-select", "en-US": "SHARE" },
                "gamepad-ds4-options": { "fallback": "gamepad-sony-start", "en-US": "OPTIONS" },
                "gamepad-ds4-playstation": "gamepad-sony-playstation",
                "gamepad-ds4-l3": "gamepad-sony-l3",
                "gamepad-ds4-r3": "gamepad-sony-r3",
                "gamepad-ds4-touchpad": "gamepad-sony-touchpad"
            });
            metadata.registerDeviceType("gamepad-ds4", {
                "buttons": [
                    "gamepad-ds4-cross",
                    "gamepad-ds4-circle",
                    "gamepad-ds4-square",
                    "gamepad-ds4-triangle",
                    "gamepad-ds4-l1",
                    "gamepad-ds4-r1",
                    "gamepad-ds4-l2",
                    "gamepad-ds4-r2",
                    "gamepad-ds4-share",
                    "gamepad-ds4-options",
                    "gamepad-ds4-l3",
                    "gamepad-ds4-r3",
                    "gamepad-sony-dpad-up",
                    "gamepad-sony-dpad-down",
                    "gamepad-sony-dpad-left",
                    "gamepad-sony-dpad-right",
                    "gamepad-ds4-playstation",
                    "gamepad-ds4-touchpad",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
            metadata.registerDevice("054c", "054c", "gamepad-ds4", { "en-US": "DualShock 4 Controller" });
            metadata.registerDevice("054c", "09cc", "gamepad-ds4", { "en-US": "DualShock 4 Controller (2nd Gen)" });
            metadata.registerDevice("054c", "0ba0", "gamepad-ds4", { "en-US": "DualShock 4 Wireless Adapter" });
            metadata.registerRemap({
                "mapping": "standard",
                "tested": ["Windows 7 / Opera 52.0.2871.99"],
                "matches": [
                    "054c-054c-blink-10-14",
                    "054c-09cc-blink-10-14",
                    "054c-0ba0-blink-10-14",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a2" }, { "src": "a5" }],
                "buttons": [
                    { "src": "b1" }, { "src": "b2" }, { "src": "b0" }, { "src": "b3" },
                    { "src": "b4" }, { "src": "b5" }, { "src": "a3", "xform": "11-01", "param": 0.125 }, { "src": "a4", "xform": "11-01", "param": 0.125 },
                    { "src": "b8" }, { "src": "b9" }, { "src": "b10" }, { "src": "b11" },
                    { "src": "a9", "xform": "hat-up-bit" }, { "src": "a9", "xform": "hat-down-bit" }, { "src": "a9", "xform": "hat-left-bit" }, { "src": "a9", "xform": "hat-right-bit" },
                    // -- end of standard layout - bellow matches existing wired ds4 connection standard of chrome/blink
                    { "src": "b12" },
                    { "src": "b13" } // Touchpad click (unavailable on FireFox)
                ]
                // Note: Axis 6-8 are ignored (dead)
                // Note: Button 6 and 7 are ignored (overlaps with axis 3/4 for triggers)
            });
            metadata.registerRemap({
                "mapping": "standard",
                "tested": ["Windows 7 / Firefox 62.0a1 (2018-05-09) - DPad busted"],
                "matches": [
                    "054c-054c-gecko-8-18",
                    "054c-09cc-gecko-8-18",
                    "054c-0ba0-gecko-8-18",
                    "054c-054c-gecko-6-18",
                    "054c-09cc-gecko-6-18",
                    "054c-0ba0-gecko-6-18",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a2" }, { "src": "a5" }],
                "buttons": [
                    { "src": "b1" }, { "src": "b2" }, { "src": "b0" }, { "src": "b3" },
                    { "src": "b4" }, { "src": "b5" }, { "src": "a3", "xform": "11-01", "param": 0.125 }, { "src": "a4", "xform": "11-01", "param": 0.125 },
                    { "src": "b8" }, { "src": "b9" }, { "src": "b10" }, { "src": "b11" },
                    { "src": "b14" }, { "src": "b15" }, { "src": "b16" }, { "src": "b17" },
                    // -- end of standard layout - bellow matches existing wired ds4 connection standard of chrome/blink
                    { "src": "b12" },
                    { "src": "b13" } // Touchpad click (unavailable on FireFox)
                ]
                // Note: Axis 6-7 are ignored (dead)
                // Note: Button 6 and 7 are ignored (overlaps with axis 3/4 for triggers)
            });
            metadata.registerRemap({
                "mapping": "standard",
                "tested": ["Ubuntu 18.04 LTS / Firefox 59.0.2"],
                "matches": [
                    "054c-054c-gecko-8-13",
                    "054c-09cc-gecko-8-13",
                    "054c-0ba0-gecko-8-13",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a3" }, { "src": "a4" }],
                "buttons": [
                    { "src": "b0" }, { "src": "b1" }, { "src": "b3" }, { "src": "b2" },
                    { "src": "b4" }, { "src": "b5" }, { "src": "a2", "xform": "11-01", "param": 0.125 }, { "src": "a5", "xform": "11-01", "param": 0.125 },
                    { "src": "b8" }, { "src": "b9" }, { "src": "b11" }, { "src": "b12" },
                    { "src": "a7", "xform": "axis-negative-01" }, { "src": "a7", "xform": "axis-positive-01" }, { "src": "a6", "xform": "axis-negative-01" }, { "src": "a6", "xform": "axis-positive-01" },
                    // -- end of standard layout - bellow matches existing wired ds4 connection standard of chrome/blink
                    { "src": "b10" },
                ]
            });
            metadata.registerRemap({
                "mapping": "standard",
                // Did version_number get bumped again maybe?  These are mappings for a "standard" layout
                // https://cs.chromium.org/chromium/src/device/gamepad/gamepad_standard_mappings_linux.cc?l=573-580
                "tested": ["Ubuntu 18.04 LTS / Chrome 66.0.3359.139"],
                "matches": [
                    "054c-054c-blink-4-18",
                    "054c-09cc-blink-4-18",
                    "054c-0ba0-blink-4-18",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "b6", "xform": "01-11" }, { "src": "b7", "xform": "01-11" }],
                "buttons": [
                    { "src": "b2" }, { "src": "b0" }, { "src": "b3" }, { "src": "b1" },
                    { "src": "b4" }, { "src": "b5" }, { "src": "a2", "xform": "11-01", "param": 0.125 }, { "src": "a3", "xform": "11-01", "param": 0.125 },
                    { "src": "b8" }, { "src": "b9" }, { "src": "b11" }, { "src": "b16" },
                    { "src": "b12" }, { "src": "b13" }, { "src": "b14" }, { "src": "b15" },
                    // -- end of standard layout
                    { "src": "b10" },
                ]
            });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-microsoft-a": { "en-US": "A Button", "fallback": "gamepad-facepad-down" },
                "gamepad-microsoft-b": { "en-US": "B Button", "fallback": "gamepad-facepad-right" },
                "gamepad-microsoft-x": { "en-US": "X Button", "fallback": "gamepad-facepad-left" },
                "gamepad-microsoft-y": { "en-US": "Y Button", "fallback": "gamepad-facepad-up" },
                "gamepad-microsoft-left-bumper": { "en-US": "Left Bumper", "fallback": "gamepad-left-bumper" },
                "gamepad-microsoft-right-bumper": { "en-US": "Right Bumper", "fallback": "gamepad-right-bumper" },
                "gamepad-microsoft-left-trigger": { "en-US": "Left Trigger", "fallback": "gamepad-left-trigger" },
                "gamepad-microsoft-right-trigger": { "en-US": "Right Trigger", "fallback": "gamepad-right-trigger" },
                "gamepad-microsoft-back": { "en-US": "Back Button", "fallback": "gamepad-face-left" },
                "gamepad-microsoft-start": { "en-US": "Start Button", "fallback": "gamepad-face-right" },
                "gamepad-microsoft-guide": { "en-US": "Guide Button", "fallback": "gamepad-logo" },
                "gamepad-microsoft-left-stick-click": { "en-US": "Left Stick Click", "fallback": "gamepad-left-stick-click" },
                "gamepad-microsoft-right-stick-click": { "en-US": "Right Stick Click", "fallback": "gamepad-right-stick-click" },
                "gamepad-microsoft-dpad-up": "gamepad-dpad-up",
                "gamepad-microsoft-dpad-down": "gamepad-dpad-down",
                "gamepad-microsoft-dpad-left": "gamepad-dpad-left",
                "gamepad-microsoft-dpad-right": "gamepad-dpad-right"
            });
            metadata.registerDeviceType("gamepad-xinput", {
                "buttons": [
                    "gamepad-microsoft-a",
                    "gamepad-microsoft-b",
                    "gamepad-microsoft-x",
                    "gamepad-microsoft-y",
                    "gamepad-left-bumper",
                    "gamepad-right-bumper",
                    "gamepad-left-trigger",
                    "gamepad-right-trigger",
                    "gamepad-microsoft-back",
                    "gamepad-microsoft-start",
                    "gamepad-left-stick-click",
                    "gamepad-right-stick-click",
                    "gamepad-dpad-up",
                    "gamepad-dpad-down",
                    "gamepad-dpad-left",
                    "gamepad-dpad-right",
                    "gamepad-microsoft-guide",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
            metadata.registerDevice("", "", "gamepad-xinput", { "en-US": "Xbox Style Gamepad (XInput)" });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-sony-cross": { "en-US": "Cross", "fallback": "gamepad-facepad-down" },
                "gamepad-sony-circle": { "en-US": "Circle", "fallback": "gamepad-facepad-right" },
                "gamepad-sony-square": { "en-US": "Square", "fallback": "gamepad-facepad-left" },
                "gamepad-sony-triangle": { "en-US": "Triangle", "fallback": "gamepad-facepad-up" },
                "gamepad-sony-l1": { "en-US": "L1 Bumper", "fallback": "gamepad-left-bumper" },
                "gamepad-sony-r1": { "en-US": "R1 Bumper", "fallback": "gamepad-right-bumper" },
                "gamepad-sony-l2": { "en-US": "L2 Trigger", "fallback": "gamepad-left-trigger" },
                "gamepad-sony-r2": { "en-US": "R2 Trigger", "fallback": "gamepad-right-trigger" },
                "gamepad-sony-select": { "en-US": "Select", "fallback": "gamepad-face-left" },
                "gamepad-sony-start": { "en-US": "Start", "fallback": "gamepad-face-right" },
                "gamepad-sony-playstation": { "en-US": "PS Button", "fallback": "gamepad-logo" },
                "gamepad-sony-l3": { "en-US": "L3 Thumbstick", "fallback": "gamepad-left-stick-click" },
                "gamepad-sony-r3": { "en-US": "R3 Thumbstick", "fallback": "gamepad-right-stick-click" },
                "gamepad-sony-touchpad": { "en-US": "Touchpad Button" },
                "gamepad-sony-dpad-up": "gamepad-dpad-up",
                "gamepad-sony-dpad-down": "gamepad-dpad-down",
                "gamepad-sony-dpad-left": "gamepad-dpad-left",
                "gamepad-sony-dpad-right": "gamepad-dpad-right"
            });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-xbox-a": "gamepad-microsoft-a",
                "gamepad-xbox-b": "gamepad-microsoft-b",
                "gamepad-xbox-x": "gamepad-microsoft-x",
                "gamepad-xbox-y": "gamepad-microsoft-y",
                "gamepad-xbox-left-bumper": "gamepad-microsoft-left-bumper",
                "gamepad-xbox-right-bumper": "gamepad-microsoft-right-bumper",
                "gamepad-xbox-left-trigger": "gamepad-microsoft-left-trigger",
                "gamepad-xbox-right-trigger": "gamepad-microsoft-right-trigger",
                "gamepad-xbox-back": "gamepad-microsoft-back",
                "gamepad-xbox-start": "gamepad-microsoft-start",
                "gamepad-xbox-guide": "gamepad-microsoft-guide",
                "gamepad-xbox-left-stick-click": "gamepad-microsoft-left-stick-click",
                "gamepad-xbox-right-stick-click": "gamepad-microsoft-right-stick-click"
            });
            metadata.registerDeviceType("gamepad-xbox", {
                "buttons": [
                    "gamepad-xbox-a",
                    "gamepad-xbox-b",
                    "gamepad-xbox-x",
                    "gamepad-xbox-y",
                    "gamepad-xbox-left-bumper",
                    "gamepad-xbox-right-bumper",
                    "gamepad-xbox-left-trigger",
                    "gamepad-xbox-right-trigger",
                    "gamepad-xbox-back",
                    "gamepad-xbox-start",
                    "gamepad-xbox-left-stick-click",
                    "gamepad-xbox-right-stick-click",
                    "gamepad-microsoft-dpad-up",
                    "gamepad-microsoft-dpad-down",
                    "gamepad-microsoft-dpad-left",
                    "gamepad-microsoft-dpad-right",
                    "gamepad-xbox-guide",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
            metadata.registerDevice("045e", "0202", "gamepad-xbox", { "en-US": "Xbox Controller" });
            metadata.registerDevice("045e", "0285", "gamepad-xbox", { "en-US": "Xbox Controller S" });
            metadata.registerDevice("045e", "0289", "gamepad-xbox", { "en-US": "Xbox Controller S" });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-xb360-a": "gamepad-microsoft-a",
                "gamepad-xb360-b": "gamepad-microsoft-b",
                "gamepad-xb360-x": "gamepad-microsoft-x",
                "gamepad-xb360-y": "gamepad-microsoft-y",
                "gamepad-xb360-left-bumper": "gamepad-microsoft-left-bumper",
                "gamepad-xb360-right-bumper": "gamepad-microsoft-right-bumper",
                "gamepad-xb360-left-trigger": "gamepad-microsoft-left-trigger",
                "gamepad-xb360-right-trigger": "gamepad-microsoft-right-trigger",
                "gamepad-xb360-back": "gamepad-microsoft-back",
                "gamepad-xb360-start": "gamepad-microsoft-start",
                "gamepad-xb360-guide": "gamepad-microsoft-guide",
                "gamepad-xb360-left-stick-click": "gamepad-microsoft-left-stick-click",
                "gamepad-xb360-right-stick-click": "gamepad-microsoft-right-stick-click"
            });
            metadata.registerDeviceType("gamepad-xb360", {
                "buttons": [
                    "gamepad-xb360-a",
                    "gamepad-xb360-b",
                    "gamepad-xb360-x",
                    "gamepad-xb360-y",
                    "gamepad-xb360-left-bumper",
                    "gamepad-xb360-right-bumper",
                    "gamepad-xb360-left-trigger",
                    "gamepad-xb360-right-trigger",
                    "gamepad-xb360-back",
                    "gamepad-xb360-start",
                    "gamepad-xb360-left-stick-click",
                    "gamepad-xb360-right-stick-click",
                    "gamepad-microsoft-dpad-up",
                    "gamepad-microsoft-dpad-down",
                    "gamepad-microsoft-dpad-left",
                    "gamepad-microsoft-dpad-right",
                    "gamepad-xb360-guide",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
            metadata.registerDevice("045e", "028e", "gamepad-xb360", { "en-US": "Xbox 360 Controller" });
            metadata.registerDevice("045e", "028f", "gamepad-xb360", { "en-US": "Xbox 360 Wireless Controller" });
            metadata.registerDevice("045e", "0291", "gamepad-xb360", { "en-US": "Xbox 360 Wireless Receiver for Windows" });
            metadata.registerDevice("045e", "02a1", "gamepad-xb360", { "en-US": "Xbox 360 Wireless Receiver for Windows" });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                "gamepad-xbone-a": "gamepad-microsoft-a",
                "gamepad-xbone-b": "gamepad-microsoft-b",
                "gamepad-xbone-x": "gamepad-microsoft-x",
                "gamepad-xbone-y": "gamepad-microsoft-y",
                "gamepad-xbone-left-bumper": "gamepad-microsoft-left-bumper",
                "gamepad-xbone-right-bumper": "gamepad-microsoft-right-bumper",
                "gamepad-xbone-left-trigger": "gamepad-microsoft-left-trigger",
                "gamepad-xbone-right-trigger": "gamepad-microsoft-right-trigger",
                "gamepad-xbone-view": { "fallback": "gamepad-microsoft-back", "en-US": "View Button" },
                "gamepad-xbone-menu": { "fallback": "gamepad-microsoft-start", "en-US": "Menu Button" },
                "gamepad-xbone-xbox": { "fallback": "gamepad-microsoft-guide", "en-US": "Xbox Button" },
                "gamepad-xbone-left-stick-click": "gamepad-microsoft-left-stick-click",
                "gamepad-xbone-right-stick-click": "gamepad-microsoft-right-stick-click"
            });
            metadata.registerDeviceType("gamepad-xbone", {
                "buttons": [
                    "gamepad-xbone-a",
                    "gamepad-xbone-b",
                    "gamepad-xbone-x",
                    "gamepad-xbone-y",
                    "gamepad-xbone-left-bumper",
                    "gamepad-xbone-right-bumper",
                    "gamepad-xbone-left-trigger",
                    "gamepad-xbone-right-trigger",
                    "gamepad-xbone-view",
                    "gamepad-xbone-menu",
                    "gamepad-xbone-left-stick-click",
                    "gamepad-xbone-right-stick-click",
                    "gamepad-microsoft-dpad-up",
                    "gamepad-microsoft-dpad-down",
                    "gamepad-microsoft-dpad-left",
                    "gamepad-microsoft-dpad-right",
                    "gamepad-xbone-xbox",
                ],
                "axises": [
                    "gamepad-left-thumb-x",
                    "gamepad-left-thumb-y",
                    "gamepad-right-thumb-x",
                    "gamepad-right-thumb-y",
                ]
            });
            metadata.registerDevice("045e", "02d1", "gamepad-xbone", { "en-US": "Xbox One Controller" });
            metadata.registerDevice("045e", "02dd", "gamepad-xbone", { "en-US": "Xbox One Controller" }); // Firmware 2015
            metadata.registerDevice("045e", "02e3", "gamepad-xbone", { "en-US": "Xbox One Elite Controller" });
            metadata.registerDevice("045e", "02e6", "gamepad-xbone", { "en-US": "Wireless XBox Controller Dongle" });
            metadata.registerDevice("045e", "02ea", "gamepad-xbone", { "en-US": "Xbox One S Controller" });
            metadata.registerDevice("045e", "02fd", "gamepad-xbone", { "en-US": "Xbox One S Controller (Bluetooth)" });
            metadata.registerRemap({
                "mapping": "standard",
                "tested": ["Ubuntu 18.04 LTS / Firefox 59.0.2"],
                "matches": [
                    "045e-028e-gecko-8-11",
                    "045e-02d1-gecko-8-11",
                ],
                "axes": [{ "src": "a0" }, { "src": "a1" }, { "src": "a3" }, { "src": "a4" }],
                "buttons": [
                    { "src": "b0" }, { "src": "b1" }, { "src": "b2" }, { "src": "b3" },
                    { "src": "b4" }, { "src": "b5" }, { "src": "a2", "xform": "11-01", "param": 0.125 }, { "src": "a5", "xform": "11-01", "param": 0.125 },
                    { "src": "b6" }, { "src": "b7" }, { "src": "b9" }, { "src": "b10" },
                    { "src": "a7", "xform": "axis-negative-01" }, { "src": "a7", "xform": "axis-positive-01" }, { "src": "a6", "xform": "axis-negative-01" }, { "src": "a6", "xform": "axis-positive-01" },
                    // -- end of standard layout
                    { "src": "b8" },
                ]
            });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerButtons({
                // XXX: Should probably add some "joystick-*" fallbacks eventually
                "saitek-x52-trigger-half": { "en-US": "Joystick Half Trigger" },
                "saitek-x52-fire": { "en-US": "Joystick Fire Button" },
                "saitek-x52-a": { "en-US": "Joystick A Button" },
                "saitek-x52-b": { "en-US": "Joystick B Button" },
                "saitek-x52-c": { "en-US": "Joystick C Button" },
                "saitek-x52-trigger-pinky": { "en-US": "Joystick Pinky Trigger" },
                "saitek-x52-d": { "en-US": "Throttle D Button" },
                "saitek-x52-e": { "en-US": "Throttle E Button" },
                "saitek-x52-t1": { "en-US": "T1" },
                "saitek-x52-t2": { "en-US": "T2" },
                "saitek-x52-t3": { "en-US": "T3" },
                "saitek-x52-t4": { "en-US": "T4" },
                "saitek-x52-t5": { "en-US": "T5" },
                "saitek-x52-t6": { "en-US": "T6" },
                "saitek-x52-trigger-full": { "en-US": "Joystick Full Trigger" },
                "saitek-x52-hat-alt-up": { "en-US": "Alternate Hat: Up" },
                "saitek-x52-hat-alt-right": { "en-US": "Alternate Hat: Right" },
                "saitek-x52-hat-alt-down": { "en-US": "Alternate Hat: Down" },
                "saitek-x52-hat-alt-left": { "en-US": "Alternate Hat: Left" },
                "saitek-x52-hat-throttle-up": { "en-US": "Throttle Hat: Up" },
                "saitek-x52-hat-throttle-right": { "en-US": "Throttle Hat: Right" },
                "saitek-x52-hat-throttle-down": { "en-US": "Throttle Hat: Down" },
                "saitek-x52-hat-throttle-left": { "en-US": "Throttle Hat: Left" },
                "saitek-x52-mode-1": { "en-US": "Mode Dial: 1 (Down/White)" },
                "saitek-x52-mode-2": { "en-US": "Mode Dial: 2 (Middle/Orange)" },
                "saitek-x52-mode-3": { "en-US": "Mode Dial: 3 (Up/Red)" },
                "saitek-x52-mfd-function": { "en-US": "MFD Button: Function" },
                "saitek-x52-mfd-up": { "en-US": "MFD Button: Down / Start / Stop" },
                "saitek-x52-mfd-down": { "en-US": "MFD Button: Up / Reset" },
                "saitek-x52-i": { "en-US": "Throttle i Button" },
                "saitek-x52-mouse-click": { "en-US": "Left Mouse (Throttle)" },
                "saitek-x52-mouse-wheel": { "en-US": "Mouse Wheel (Throttle)" },
                "saitek-x52-mouse-wheel-down": { "en-US": "Mouse Wheel Forward / Down" },
                "saitek-x52-mouse-wheel-up": { "en-US": "Mouse Wheel Back / Up" },
                // Synthetic Buttons
                "saitek-x52-hat-thumb-up": { "en-US": "Joystick Hat: Up" },
                "saitek-x52-hat-thumb-right": { "en-US": "Joystick Hat: Right" },
                "saitek-x52-hat-thumb-down": { "en-US": "Joystick Hat: Down" },
                "saitek-x52-hat-thumb-left": { "en-US": "Joystick Hat: Left" }
            });
            metadata.regsiterAxises({
                "saitek-x52-joystick-x": { "range": "11", "min": "left", "max": "right", "en-US": "Joystick X Axis", "stick": "saitek-x52-joystick" },
                "saitek-x52-joystick-y": { "range": "11", "min": "forward", "max": "backward", "en-US": "Joystick Y Axis", "stick": "saitek-x52-joystick" },
                "saitek-x52-throttle": { "range": "11", "min": "forward", "max": "backward", "en-US": "Throttle" },
                "saitek-x52-i-dial": { "range": "11", "min": "ccw", "max": "cw", "en-US": "Throttle (i) Dial" },
                "saitek-x52-e-dial": { "range": "11", "min": "ccw", "max": "cw", "en-US": "Throttle (E) Dial" },
                "saitek-x52-joystick-twist": { "range": "11", "min": "ccw", "max": "cw", "en-US": "Joystick Twist Axis", "stick": "saitek-x52-joystick" },
                "saitek-x52-throttle-thumb-slider": { "range": "11", "min": "forward", "max": "backward", "en-US": "Throttle Thumb Slider" },
                "saitek-x52-mouse-x": { "range": "11", "min": "left", "max": "right", "en-US": "Throttle Mouse X Axis", "stick": "saitek-x52-mouse" },
                "saitek-x52-mouse-y": { "range": "11", "min": "up", "max": "down", "en-US": "Throttle Mouse Y Axis", "stick": "saitek-x52-mouse" }
            });
            // XXX: Note: HAT button order:                     Up Right Down Left
            // Doesn't match "standard" gamepad dpad orders:    Up Down Left Right
            metadata.registerDeviceType("saitek-x52", {
                "buttons": [
                    "saitek-x52-trigger-half",
                    "saitek-x52-fire",
                    "saitek-x52-a",
                    "saitek-x52-b",
                    "saitek-x52-c",
                    "saitek-x52-trigger-pinky",
                    "saitek-x52-d",
                    "saitek-x52-e",
                    "saitek-x52-t1",
                    "saitek-x52-t2",
                    "saitek-x52-t3",
                    "saitek-x52-t4",
                    "saitek-x52-t5",
                    "saitek-x52-t6",
                    "saitek-x52-trigger-full",
                    "saitek-x52-hat-alt-up",
                    "saitek-x52-hat-alt-right",
                    "saitek-x52-hat-alt-down",
                    "saitek-x52-hat-alt-left",
                    "saitek-x52-hat-throttle-up",
                    "saitek-x52-hat-throttle-right",
                    "saitek-x52-hat-throttle-down",
                    "saitek-x52-hat-throttle-left",
                    "saitek-x52-mode-1",
                    "saitek-x52-mode-2",
                    "saitek-x52-mode-3",
                    "saitek-x52-mfd-function",
                    "saitek-x52-mfd-up",
                    "saitek-x52-mfd-down",
                    "saitek-x52-i",
                    "saitek-x52-mouse-click",
                    "saitek-x52-mouse-wheel",
                    "saitek-x52-mouse-wheel-down",
                    "saitek-x52-mouse-wheel-up",
                    // Synthetic Buttons
                    "saitek-x52-hat-thumb-up",
                    "saitek-x52-hat-thumb-right",
                    "saitek-x52-hat-thumb-down",
                    "saitek-x52-hat-thumb-left",
                ],
                "axises": [
                    "saitek-x52-joystick-x",
                    "saitek-x52-joystick-y",
                    "saitek-x52-throttle",
                    "saitek-x52-i-dial",
                    "saitek-x52-e-dial",
                    "saitek-x52-joystick-twist",
                    "saitek-x52-throttle-thumb-slider",
                    "saitek-x52-mouse-x",
                    "saitek-x52-mouse-y",
                ]
            });
            metadata.registerDevice("06a3", "075c", "saitek-x52", { "en-US": "Saitek X52 Flight Control System" });
            metadata.registerRemap({
                "mapping": "-custom",
                "tested": ["Windows 10 / Chrome 74.0.3729.131"],
                "matches": [
                    "06a3-075c-blink-10-32",
                ],
                "axes": [
                    // identity mapped
                    { "src": "a0" }, { "src": "a1" }, { "src": "a2" }, { "src": "a3" }, { "src": "a4" }, { "src": "a5" }, { "src": "a6" }, { "src": "a8" }, { "src": "a7" }
                    // dropped: axis 9 (HAT)
                ],
                "buttons": [
                    // identity mapped
                    { "src": "b0" }, { "src": "b1" }, { "src": "b2" }, { "src": "b3" }, { "src": "b4" },
                    { "src": "b5" }, { "src": "b6" }, { "src": "b7" }, { "src": "b8" }, { "src": "b9" },
                    { "src": "b10" }, { "src": "b11" }, { "src": "b12" }, { "src": "b13" }, { "src": "b14" },
                    { "src": "b15" }, { "src": "b16" }, { "src": "b17" }, { "src": "b18" }, { "src": "b19" },
                    { "src": "b20" }, { "src": "b21" }, { "src": "b22" }, { "src": "b23" }, { "src": "b24" },
                    { "src": "b25" }, { "src": "b26" }, { "src": "b27" }, { "src": "b28" }, { "src": "b29" },
                    { "src": "b30" }, { "src": "b31" },
                    // Chrome is lacking buttons for mouse wheel
                    { "src": "b0", "xform": "constant", "param": 0 },
                    { "src": "b0", "xform": "constant", "param": 0 },
                    // Synthetic buttons for missing HAT buttons on Chrome
                    { "src": "a9", "xform": "hat-up-bit" },
                    { "src": "a9", "xform": "hat-right-bit" },
                    { "src": "a9", "xform": "hat-down-bit" },
                    { "src": "a9", "xform": "hat-left-bit" },
                ]
            });
            metadata.registerRemap({
                "mapping": "-custom",
                "tested": ["Windows 10 / FireFox 66.0.5"],
                "matches": [
                    "06a3-075c-gecko-9-38",
                ],
                "axes": [
                    // identity mapped
                    { "src": "a0" }, { "src": "a1" }, { "src": "a2" }, { "src": "a3" }, { "src": "a4" },
                    { "src": "a5" }, { "src": "a6" }, { "src": "a8" }, { "src": "a7" }
                ],
                "buttons": [
                    // identity mapped
                    { "src": "b0" }, { "src": "b1" }, { "src": "b2" }, { "src": "b3" }, { "src": "b4" },
                    { "src": "b5" }, { "src": "b6" }, { "src": "b7" }, { "src": "b8" }, { "src": "b9" },
                    { "src": "b10" }, { "src": "b11" }, { "src": "b12" }, { "src": "b13" }, { "src": "b14" },
                    { "src": "b15" }, { "src": "b16" }, { "src": "b17" }, { "src": "b18" }, { "src": "b19" },
                    { "src": "b20" }, { "src": "b21" }, { "src": "b22" }, { "src": "b23" }, { "src": "b24" },
                    { "src": "b25" }, { "src": "b26" }, { "src": "b27" }, { "src": "b28" }, { "src": "b29" },
                    { "src": "b30" }, { "src": "b31" }, { "src": "b32" }, { "src": "b33" },
                    // Last 4 buttons are meant to be the HAT, but they're nonfunctional on FireFox.
                    { "src": "b34" }, { "src": "b35" }, { "src": "b36" }, { "src": "b37" },
                ]
            });
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));
/* Copyright 2017 MaulingMonkey

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var mmk;
(function (mmk) {
    var gamepad;
    (function (gamepad) {
        var metadata;
        (function (metadata) {
            metadata.registerDeviceType("dead", {
                "axises": [],
                "buttons": []
            });
            metadata.registerDeviceType("unknown-unknown", {
                "axises": [],
                "buttons": []
            });
            // registerDeviceType("gamepad-unknown", { ... }); // See gamepad-aaa-generic.ts
            // registerDeviceType("gamepad-xinput", { ... });  // See gamepad-microsoft.ts
            metadata.registerDevice("04f3", "0089", "dead", { "en-US": "Unknown Device" }); // Unknown/dead Samsung 940X 2-axis 0-button device.  Probably the touchpad or screen, but interacting with neither causes any axis changes.  Pen tilt?
        })(metadata = gamepad.metadata || (gamepad.metadata = {}));
    })(gamepad = mmk.gamepad || (mmk.gamepad = {}));
})(mmk || (mmk = {}));

    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['exports'], function (exports) {
            exports.default = mmk.gamepad;
            Object.keys(mmk.gamepad).forEach(function (key) {
                exports[key] = mmk.gamepad[key];
            });
        });
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
        // CommonJS
        Object.keys(mmk.gamepad).forEach(function (key) {
            exports[key] = mmk.gamepad[key];
        });
    }
})(this);
//# sourceMappingURL=global.js.map