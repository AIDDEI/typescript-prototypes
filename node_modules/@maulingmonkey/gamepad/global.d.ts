declare namespace mmk.gamepad {
    /**
     * A [[Gamepad.buttons]] value.
     */
    interface GamepadButton {
        readonly pressed: boolean;
        readonly touched: boolean;
        /**
         * Generally 0 or 1 for most digital buttons, but can also be fractional values for triggers.
         */
        readonly value: number;
    }
    /** @hidden - XXX - I'm likely to extend this to include "-mmk-joystick", "-mmk-hotas", or similar? */
    type GamepadMappingType = "" | "standard" | "-custom";
    /**
     * See also:
     * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad
     * - https://w3c.github.io/gamepad/#gamepad-interface
     */
    interface Gamepad {
        /**
         * A browser specific string defining what kind of gamepad this is.  Note that this does *not* uniquely identify
         * the gamepad, multiple gamepads of the same type (or even different types, if provided through xinput) may
         * share the same [[Gamepad.id]].  If you want to differentiate multiple gamepads, instead use [[Gamepad.index]].
         *
         * Examples observed:
         * - `"xinput"`
         * - `"Xbox 360 Controller (XInput STANDARD GAMEPAD)"`
         * - `"DUALSHOCK®4 USB Wireless Adaptor (Vendor: 054c Product: 0ba0)"`
         * - `"054c-0ba0-DUALSHOCK®4 USB Wireless Adaptor"`
         * - `"Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)"`
         * - `"054c-09cc-Wireless Controller"`
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id
         * - https://w3c.github.io/gamepad/#dom-gamepad-id
         */
        readonly id: string;
        /**
         * A `VRDisplay.displayId` this gamepad is associated with.
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/displayId
         * - https://immersive-web.github.io/webvr/spec/1.1/#dom-vrdisplay-displayid
         * - https://immersive-web.github.io/webvr/spec/1.1/#gamepad-getvrdisplays-attribute
         */
        readonly displayId?: number;
        /**
         * The gamepad mapping.  `"standard" | ""`.
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
         * - https://w3c.github.io/gamepad/#dom-gamepad-mapping
         */
        readonly mapping: GamepadMappingType;
        /**
         * A unique index corresponding to this gamepad.  Stable for as long as the gamepad is connected.  Might be
         * reused if the gamepad is disconnected and a new one connected in it's place.  Corresponds to the index of
         * [[Gamepad]][] arrays that have *not* culled null/undefined/nonstandard gamepads only!
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/index
         * - https://w3c.github.io/gamepad/#dom-gamepad-index
         */
        readonly index: number;
        /**
         * A unique timestamp for when this gamepad data was last updated.
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/timestamp
         * - https://w3c.github.io/gamepad/#dom-gamepad-timestamp
         */
        readonly timestamp: number;
        /**
         * Indicates if this gamepad is still connected or not.
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/connected
         * - https://w3c.github.io/gamepad/#dom-gamepad-connected
         */
        readonly connected: boolean;
        /**
         * Gamepad axes (for the `"standard"` mapping, this means only the thumbsticks, not any triggers.)
         *
         * "standard" mapping values per https://w3c.github.io/gamepad/#remapping :
         *
         * - [0] L. Stick X Right
         * - [1] L. Stick Y Down
         * - [2] R. Stick X Right
         * - [3] R. Stick Y Down
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/axes
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
         * - https://w3c.github.io/gamepad/#dom-gamepad-axes
         * - https://w3c.github.io/gamepad/#dom-gamepad-mapping
         */
        readonly axes: ReadonlyArray<number>;
        /**
         * Gamepad buttons (for the `"standard"` mapping, this include the triggers.)
         *
         * "standard" mapping values per https://w3c.github.io/gamepad/#remapping :
         *
         * - [ 0] A
         * - [ 1] B
         * - [ 2] X
         * - [ 3] Y
         * - [ 4] L. Shoulder
         * - [ 5] R. Shoulder
         * - [ 6] L. Trigger
         * - [ 7] R. Trigger
         * - [ 8] Back/View
         * - [ 9] Start/Menu
         * - [10] L. Thumb
         * - [11] R. Thumb
         * - [12] Dpad Up
         * - [13] Dpad Down
         * - [14] Dpad Left
         * - [15] Dpad Right
         * - [16] Guide (x)
         *
         * See also:
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons
         * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
         * - https://w3c.github.io/gamepad/#dom-gamepad-buttons
         */
        readonly buttons: ReadonlyArray<GamepadButton>;
    }
    /** @hidden */
    interface ClonedGamepad extends Gamepad {
        axes: number[];
        buttons: GamepadButton[];
    }
}
declare namespace mmk.gamepad {
    /**
     * Create a deep clone of a gamepad.
    */
    function cloneGamepad(original: Gamepad): ClonedGamepad;
    function cloneGamepad(original: Gamepad | null): ClonedGamepad | null;
    function cloneGamepad(original: Gamepad | undefined): ClonedGamepad | undefined;
    function cloneGamepad(original: Gamepad | undefined | null): ClonedGamepad | undefined | null;
    /**
     * Create a deep clone of a set of gamepads.  Also works on array-like objects, such as the "array" returned from
     * `navigator.getGamepads()`.
     */
    function cloneGamepads(original: Gamepad[]): ClonedGamepad[];
    function cloneGamepads(original: (Gamepad | null)[]): (ClonedGamepad | null)[];
    function cloneGamepads(original: (Gamepad | undefined)[]): (ClonedGamepad | undefined)[];
    function cloneGamepads(original: (Gamepad | undefined | null)[]): (ClonedGamepad | undefined | null)[];
}
declare namespace mmk.gamepad {
    namespace config {
        /**
         * Microsoft Edge now responds to gamepad input in a way that is *very* likely to conflict with your own
         * gamepad handling.  For example, hitting (B) will focus... the address bar?  Home button?  Something in
         * the browser header that isn't what you want.  By enabling this (default behavior), we mark all Edge's
         * gamepad key events as handled, disabling the conflicting Edge behavior.
         *
         * If you want the default  Microsoft Edge gamepad navigation behavior, disable this option. You might
         * consider disabling this during your title screen, or alternatively making a quit option that navigates
         * back in history, or otherwise provide some kind of mechanism to allow users to return gamepad control
         * to it's browser navigation role.
         *
         * In the future, disabling this may also add some navigation behavior to Chrome/Firefox to match IE11's
         * behavior.  Or this option might go away entirely in favor of a better approach.
         */
        var captureGamepadEvents: boolean;
    }
    /**
     * A generic `"mmk-gamepad-*"` event.
     */
    interface GamepadEvent {
        readonly gamepadType: metadata.DeviceType;
        readonly gamepadIndex: number;
    }
    /**
     * A `"mmk-gamepad-connected"` or `"mmk-gamepad-disconnected"` event, indicating that gamepads were physically
     * connected, disconnected, or became unmasked/visible to websites due to the user interacting with one.
     */
    interface GamepadConnectivityEvent extends GamepadEvent {
        readonly connected: boolean;
    }
    /**
     * A `"mmk-gamepad-button-down"`, `"mmk-gamepad-button-up"`, or `"mmk-gamepad-button-value"` event, indicating that
     * one of the gamepad buttons changed value.
     */
    interface GamepadButtonEvent extends GamepadEvent {
        readonly held: boolean;
        readonly buttonIndex: number;
        readonly buttonValue: number;
    }
    /**
     * A `"mmk-gamepad-axis-value"` event, indicating that one of the gamepad axises changed value.
     */
    interface GamepadAxisEvent extends GamepadEvent {
        readonly axisIndex: number;
        readonly axisValue: number;
    }
    type PollGamepadOptions = GetGamepadsOptions & {
        keepInactive: true;
        keepNull: true;
        standardize: true;
    };
    /**
     * Poll gamepad state, and dispatch events based on that state.
     * Note that mmk.gamepad will automatically dispatch by default based on one of:
     * ```ts
     *     requestAnimationFrame(...)
     *     setInterval(..., 10)
     * ```
     * And that calling this method will disable that automatic dispatch mechanism.
     *
     * @param options Allows some customization of if e.g. deadzones are applied to generated events or not.
     */
    function pollEvents(options?: PollGamepadOptions): void;
    interface GamepadEventsMap {
        "mmk-gamepad-connected": mmk.gamepad.GamepadConnectivityEvent;
        "mmk-gamepad-disconnected": mmk.gamepad.GamepadConnectivityEvent;
        "mmk-gamepad-button-down": mmk.gamepad.GamepadButtonEvent;
        "mmk-gamepad-button-up": mmk.gamepad.GamepadButtonEvent;
        "mmk-gamepad-button-value": mmk.gamepad.GamepadButtonEvent;
        "mmk-gamepad-axis-value": mmk.gamepad.GamepadAxisEvent;
    }
    /** @hidden */
    type GamepadEventsMap_and_CustomEvent = {
        [P in keyof mmk.gamepad.GamepadEventsMap]: mmk.gamepad.GamepadEventsMap[P] & CustomEvent<undefined>;
    };
}
/** @hidden */
interface GlobalEventHandlersEventMap extends mmk.gamepad.GamepadEventsMap_and_CustomEvent {
}
declare namespace mmk.gamepad {
    interface GetGamepadsOptions {
        deadZone: number;
        standardize: boolean;
        keepNonstandard: boolean;
        keepInactive: boolean;
        keepNull: boolean;
    }
    function getGamepads(options: GetGamepadsOptions & {
        keepNull: false;
    }): Gamepad[];
    function getGamepads(options: GetGamepadsOptions): (Gamepad | null)[];
}
declare namespace mmk.gamepad {
    /**
     * Returns `true` if the browser seems to provide the gamepad APIs mmk.gamepad relies on for actual input.
     * This isn't 100% accurate, Chromium on Linux has been known to define the APIs but not implement them.
     *
     * `mmk.gamepad` methods should generally still "work" (e.g. noop) even if the underlying browser APIs are missing,
     * this method mostly exists to hint that you might not want to bother showing gamepad specific hints, or might want
     * to suggest a gamepad-enabled browser, depending on your game.
     */
    function isSupported(): boolean;
}
declare namespace mmk.gamepad {
    /** Given a [[Gamepad]] where `gamepad.mapping !== "standard"`, or a gamepad where `gamepad.mapping === "standard"`
     * but the browser is suspected of incorrectly implementing the standard mapping, rearrange the axes and buttons of
     * the [[Gamepad]] to properly match the `"standard"` mapping.  As for what the `"standard"` mapping is, see
     *
     * See also:  (W3C Gamepad Editor's Draft)[https://w3c.github.io/gamepad/#remapping] for information about the
     * standard gamepad mapping.
     */
    function tryRemapStdLayout(gamepad: Gamepad): Gamepad;
    function tryRemapStdLayout(gamepad: Gamepad | null): Gamepad | null;
}
declare namespace mmk.gamepad {
    /**
     * Dual Shock / Sony Button values in the standard mapping layout.
     *
     * Main values are:
     * `Cross`,
     * `Circle`,
     * `Square`,
     * `Triangle`,
     * `LeftShoulder`,
     * `RightShoulder`,
     * `LeftTrigger`,
     * `RightTrigger`,
     * `Select`,
     * `Start`,
     * `LeftThumb`,
     * `RightThumb`,
     * `DirectionalPadUp`,
     * `DirectionalPadDown`,
     * `DirectionalPadLeft`,
     * `DirectionalPadRight`
     *
     * Additionally, there are a few shorthand aliases - `LeftShoulder` has `LShoulder`, `DirectionalPadLeft` has
     * `DPadLeft` - and `Select`/`Start` have DS4 aliases `Share`/`Options`.
     *
     * Finally, the hideously and unfixably nonportable `_PlayStationLogo` button can be used.
     *
     * See also:
     * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons
     * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
     * - https://w3c.github.io/gamepad/#dom-gamepad-buttons
     */
    enum DualShockButton {
        Cross = 0,
        Circle = 1,
        Square = 2,
        Triangle = 3,
        LeftShoulder = 4,
        RightShoulder = 5,
        LeftTrigger = 6,
        RightTrigger = 7,
        Select = 8,
        Start = 9,
        LeftThumb = 10,
        RightThumb = 11,
        DirectionalPadUp = 12,
        DirectionalPadDown = 13,
        DirectionalPadLeft = 14,
        DirectionalPadRight = 15,
        /** AVOID.  This is unavailable on many browsers, and even if available, likely triggers other software like Steam or built in Windows 10 stuff. */
        _PlayStationLogo = 16,
        LShoulder = 4,
        RShoulder = 5,
        LTrigger = 6,
        RTrigger = 7,
        LThumb = 10,
        RThumb = 11,
        DPadUp = 12,
        DPadDown = 13,
        DPadLeft = 14,
        DPadRight = 15,
        L1 = 4,
        L2 = 6,
        L3 = 10,
        R1 = 5,
        R2 = 7,
        R3 = 11,
        Share = 8,
        Options = 9
    }
}
declare namespace mmk.gamepad {
    /**
     * Gamepad axes for the `"standard"` gamepad `mapping`.  This means only the thumbsticks, not any triggers.
     *
     * Per https://w3c.github.io/gamepad/#remapping this contains:
     *
     * - `LeftStickRight`,  `LeftStickX`,  `LStickX` (axis 0)
     * - `LeftStickDown`,   `LeftStickY`,  `LStickY` (axis 1)
     * - `RightStickRight`, `RightStickX`, `RStickX` (axis 2)
     * - `RightStickDown`,  `RightStickY`, `RStickY` (axis 3)
     */
    enum StandardAxis {
        /** The left stick's X axis.  Right is positive, left is negative. */
        LeftStickRight = 0,
        /** The left stick's Y axis.  Down is positive, up is negative. */
        LeftStickDown = 1,
        /** The right stick's X axis.  Right is positive, left is negative. */
        RightStickRight = 2,
        /** The right stick's Y axis.  Down is positive, up is negative. */
        RightStickDown = 3,
        /** The left stick's X axis.  Right is positive, left is negative. */
        LeftStickX = 0,
        /** The left stick's Y axis.  Down is positive, up is negative. */
        LeftStickY = 1,
        /** The right stick's X axis.  Right is positive, left is negative. */
        RightStickX = 2,
        /** The right stick's Y axis.  Down is positive, up is negative. */
        RightStickY = 3,
        /** The left stick's X axis.  Right is positive, left is negative. */
        LStickX = 0,
        /** The left stick's Y axis.  Down is positive, up is negative. */
        LStickY = 1,
        /** The right stick's X axis.  Right is positive, left is negative. */
        RStickX = 2,
        /** The right stick's Y axis.  Down is positive, up is negative. */
        RStickY = 3
    }
}
declare namespace mmk.gamepad {
    /**
     * Xbox Button values in the standard mapping layout.
     *
     * Main values are:
     * `A`,
     * `B`,
     * `X`,
     * `Y`,
     * `LeftShoulder`,
     * `RightShoulder`,
     * `LeftTrigger`,
     * `RightTrigger`,
     * `Back`,
     * `Start`,
     * `LeftThumb`,
     * `RightThumb`,
     * `DirectionalPadUp`,
     * `DirectionalPadDown`,
     * `DirectionalPadLeft`,
     * `DirectionalPadRight`
     *
     * Additionally, there are a few shorthand aliases - `LeftShoulder` has `LShoulder`, `DirectionalPadLeft` has
     * `DPadLeft` - and `Back`/`Start` have XB1 aliases `View`/`Menu`.
     *
     * Finally, the hideously and unfixably nonportable `_Guide` button can be used.
     *
     * See also:
     * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons
     * - https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
     * - https://w3c.github.io/gamepad/#dom-gamepad-buttons
     */
    enum XboxButton {
        A = 0,
        B = 1,
        X = 2,
        Y = 3,
        LeftShoulder = 4,
        RightShoulder = 5,
        LeftTrigger = 6,
        RightTrigger = 7,
        Back = 8,
        Start = 9,
        LeftThumb = 10,
        RightThumb = 11,
        DirectionalPadUp = 12,
        DirectionalPadDown = 13,
        DirectionalPadLeft = 14,
        DirectionalPadRight = 15,
        /** AVOID.  This is unavailable on many browsers, and even if available, likely triggers other software like Steam or built in Windows 10 stuff. */
        _Guide = 16,
        LShoulder = 4,
        RShoulder = 5,
        LTrigger = 6,
        RTrigger = 7,
        LThumb = 10,
        RThumb = 11,
        DPadUp = 12,
        DPadDown = 13,
        DPadLeft = 14,
        DPadRight = 15,
        View = 8,
        Menu = 9
    }
}
declare namespace mmk.gamepad {
    /** @hidden */
    interface FlatPremapGamepadValue {
        value: number;
        pressed: boolean;
        touched: boolean;
    }
    /** @hidden */
    type FlatPremapGamepad = {
        [no: string]: FlatPremapGamepadValue;
    };
    /** @hidden */
    function flattenPremapGamepad(gamepad: Gamepad): FlatPremapGamepad;
}
declare namespace mmk.gamepad {
    /** @hidden */
    function getRawGamepads(): (Gamepad | null)[];
}
/**
 * General namespace for <strong>M</strong>auling<strong>M</strong>on<strong>k</strong>ey's typescript projects.
 *
 * You can find more typescript projects by him
 * [on github](https://github.com/MaulingMonkey?utf8=%E2%9C%93&tab=repositories&q=&type=&language=typescript)
 * or maybe [on his homepage](https://maulingmonkey.com/)
 */
declare namespace mmk { }
declare namespace mmk.gamepad {
    /**
     * A parsed [[Gamepad.id]], used for selecting browser/gamepad specific workarounds/mappings to apply.
     */
    interface ParsedGamepadId {
        /** Should always be defined, if only to "unknown" */
        name: string;
        /** May be blank, otherwise this should be a USB Vendor ID hex code like "054c", probably. */
        vendor: string;
        /** May be blank, otherwise this should be a USB Device ID hex code like "0ba0", probably. */
        product: string;
        /** Browser implementation hint */
        hint: "blink" | "gecko" | "unknown";
    }
    /**
     * Attempt to decompose a [[Gamepad.id]].  The exact layout of the [[Gamepad.id]] is hideously browser specific,
     * non-portable, brittle, and generally badwrong to rely upon... but it's also my least bad option for identifying
     * specific gamepads and applying gamepad/browser/OS specific workarounds and fixes for the raw
     * `navigator.getGamepad()` results.  Some examples:
     *
     * ```ts
     * parseGamepadId(undefined) => { name: "unknown", vendor: "", product: "", hint: "unknown" }
     * parseGamepadId(""       ) => { name: "unknown", vendor: "", product: "", hint: "unknown" }
     * parseGamepadId("asdf"   ) => { name: "asdf",    vendor: "", product: "", hint: "unknown" }
     * parseGamepadId("xinput" ) => { name: "xinput",  vendor: "", product: "", hint: "gecko"   }
     *
     * parseGamepadId("054c-0ba0-DUALSHOCK®4 USB Wireless Adaptor") => {
     *     name:    "DUALSHOCK®4 USB Wireless Adaptor",
     *     vendor:  "054c",
     *     product: "0ba0",
     *     hint:    "gecko"
     * }
     *
     * parseGamepadId("DUALSHOCK®4 USB Wireless Adaptor (Vendor: 054c Product: 0ba0)") => {
     *     name:    "DUALSHOCK®4 USB Wireless Adaptor",
     *     vendor:  "054c",
     *     product: "0ba0",
     *     hint:    "blink"
     * }
     * ```
     *
     * If you encounter new and exciting [[Gamepad.id]] schemas, please send them my way!
     *
     * See also:
     * - [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id) on [[Gamepad.id]]
     * - [W3C Editor's Draft](https://w3c.github.io/gamepad/#dom-gamepad-id) on [[Gamepad.id]]
     *
     * @param id The [[Gamepad.id]] to try and parse.
     */
    function parseGamepadId(id: string | undefined): ParsedGamepadId;
}
declare namespace mmk.gamepad {
    /** @hidden */
    function poll(action: () => void): void;
}
declare namespace mmk.gamepad.metadata {
    /**
     * An extensible interface containing members for every valid legal axis image ID
     */
    interface AxisMap {
    }
    type Axis = keyof AxisMap;
    interface AxisRangeMap {
        "01": void;
        "11": void;
    }
    interface AxisMinMap {
        "left": void;
        "ccw": void;
        "up": void;
        "forward": void;
    }
    interface AxisMaxMap {
        "right": void;
        "cw": void;
        "down": void;
        "backward": void;
    }
    type AxisRange = keyof AxisRangeMap;
    type AxisMin = keyof AxisMinMap;
    type AxisMax = keyof AxisMaxMap;
    interface AxisInformation_Root {
        "stick"?: Stick;
        "range": AxisRange;
        "min": AxisMin;
        "max": AxisMax;
        "en-US": string;
    }
    type AxisInformation = AxisInformation_Root;
    function regsiterAxises<AxisMap>(newAxises: {
        [P in keyof AxisMap]: AxisInformation;
    }): void;
    function getAxisLabel(id: Axis, locHint?: readonly string[]): string;
    function getGamepadAxisLabel(gamepad: Gamepad | VendorProduct | DeviceType, index: number, locHint?: readonly string[]): string | undefined;
}
declare namespace mmk.gamepad.metadata {
    /**
     * An extensible interface containing members for every valid legal buttom image ID
     */
    interface ButtonMap {
    }
    type Button = keyof ButtonMap;
    interface ButtonInformation_Leaf {
        /** A fallback button to inherit localization information (text, images, etc.) if not provided for this specific button. */
        "fallback": Button;
        /** A US English string describing the button.  Required unless you specify a "fallback" to inherit from. */
        "en-US"?: string;
    }
    interface ButtonInformation_Root {
        /** A US English string describing the button.  Required unless you specify a "fallback" to inherit from. */
        "en-US": string;
    }
    type ButtonInformation = ButtonInformation_Leaf | ButtonInformation_Root;
    function registerButtons<ButtonMap>(newButtons: {
        [P in keyof ButtonMap]: Button | ButtonInformation;
    }): void;
    function getButtonLabel(id: Button, locHint?: readonly string[]): string;
    function getGamepadButtonLabel(gamepad: Gamepad | VendorProduct | DeviceType, index: number, locHint?: readonly string[]): string | undefined;
}
declare namespace mmk.gamepad.metadata {
    interface LocText {
        "en-US": string;
        [locale: string]: string;
    }
    interface DeviceTypeMap {
    }
    type DeviceType = keyof DeviceTypeMap;
    interface DeviceInformation {
        buttons: Button[];
        axises: Axis[];
    }
    function registerDeviceType(deviceType: DeviceType, information: DeviceInformation): void;
    function registerDevice(vendorId: string, productId: string, deviceType: DeviceType, description: LocText): void;
    type VendorProduct = {
        vendor: string;
        product: string;
    };
    function getDeviceLabel(target: Gamepad | VendorProduct, locHint?: readonly string[]): string;
    function getDeviceType(target: Gamepad | VendorProduct | DeviceType): DeviceType;
    function getDeviceButtons(target: Gamepad | VendorProduct | DeviceType): readonly Button[];
    function getDeviceAxises(target: Gamepad | VendorProduct | DeviceType): readonly Axis[];
}
declare namespace mmk.gamepad.metadata {
    /** @hidden */ type RemapAxisType = "01-11";
    /** @hidden */ type RemapButtonType = "constant" | "11-01" | "11-10" | "axis-negative-01" | "axis-positive-01" | "hat-up-bit" | "hat-right-bit" | "hat-down-bit" | "hat-left-bit";
    /** @hidden */
    interface RemapSrc<RemapXformType> {
        "src": string;
        "xform"?: RemapXformType;
        "param"?: number;
    }
    interface Remap {
        "mapping": GamepadMappingType;
        "tested"?: string[];
        "matches": string[];
        "axes": RemapSrc<RemapAxisType>[];
        "buttons": RemapSrc<RemapButtonType>[];
    }
    function registerRemap(remap: Remap): void;
    function findRemap(gamepad: Gamepad): Remap;
}
declare namespace mmk.gamepad.metadata {
    interface StickMap {
    }
    type Stick = keyof StickMap;
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends GenericGamepadButtonMap {
    }
    interface AxisMap extends GenericGamepadAxisMap {
    }
    interface StickMap extends GenericGamepadStickMap {
    }
    interface DeviceTypeMap {
        "gamepad-unknown": void;
    }
    interface GenericGamepadButtonMap {
        "gamepad-facepad-down": boolean;
        "gamepad-facepad-right": boolean;
        "gamepad-facepad-left": boolean;
        "gamepad-facepad-up": boolean;
        "gamepad-left-bumper": boolean;
        "gamepad-right-bumper": boolean;
        "gamepad-left-trigger": boolean;
        "gamepad-right-trigger": boolean;
        "gamepad-face-left": boolean;
        "gamepad-face-right": boolean;
        "gamepad-logo": boolean;
        "gamepad-left-stick-click": boolean;
        "gamepad-right-stick-click": boolean;
        "gamepad-dpad-up": boolean;
        "gamepad-dpad-down": boolean;
        "gamepad-dpad-left": boolean;
        "gamepad-dpad-right": boolean;
    }
    interface GenericGamepadStickMap {
        "gamepad-left-thumb": void;
        "gamepad-right-thumb": void;
    }
    interface GenericGamepadAxisMap {
        "gamepad-left-thumb-x": number;
        "gamepad-left-thumb-y": number;
        "gamepad-right-thumb-x": number;
        "gamepad-right-thumb-y": number;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends Ds3ButtonMap {
    }
    interface DeviceTypeMap {
        "gamepad-ds3": void;
    }
    interface Ds3ButtonMap {
        "gamepad-ds3-cross": boolean;
        "gamepad-ds3-circle": boolean;
        "gamepad-ds3-square": boolean;
        "gamepad-ds3-triangle": boolean;
        "gamepad-ds3-l1": boolean;
        "gamepad-ds3-r1": boolean;
        "gamepad-ds3-l2": boolean;
        "gamepad-ds3-r2": boolean;
        "gamepad-ds3-select": boolean;
        "gamepad-ds3-start": boolean;
        "gamepad-ds3-playstation": boolean;
        "gamepad-ds3-l3": boolean;
        "gamepad-ds3-r3": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends Ds4ButtonMap {
    }
    interface DeviceTypeMap {
        "gamepad-ds4": void;
    }
    interface Ds4ButtonMap {
        "gamepad-ds4-cross": boolean;
        "gamepad-ds4-circle": boolean;
        "gamepad-ds4-square": boolean;
        "gamepad-ds4-triangle": boolean;
        "gamepad-ds4-l1": boolean;
        "gamepad-ds4-r1": boolean;
        "gamepad-ds4-l2": boolean;
        "gamepad-ds4-r2": boolean;
        "gamepad-ds4-share": boolean;
        "gamepad-ds4-options": boolean;
        "gamepad-ds4-playstation": boolean;
        "gamepad-ds4-l3": boolean;
        "gamepad-ds4-r3": boolean;
        "gamepad-ds4-touchpad": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends MicrosoftButtonMap {
    }
    interface DeviceTypeMap {
        "gamepad-xinput": void;
    }
    interface MicrosoftButtonMap {
        "gamepad-microsoft-a": boolean;
        "gamepad-microsoft-b": boolean;
        "gamepad-microsoft-x": boolean;
        "gamepad-microsoft-y": boolean;
        "gamepad-microsoft-left-bumper": boolean;
        "gamepad-microsoft-right-bumper": boolean;
        "gamepad-microsoft-left-trigger": boolean;
        "gamepad-microsoft-right-trigger": boolean;
        "gamepad-microsoft-back": boolean;
        "gamepad-microsoft-start": boolean;
        "gamepad-microsoft-guide": boolean;
        "gamepad-microsoft-left-stick-click": boolean;
        "gamepad-microsoft-right-stick-click": boolean;
        "gamepad-microsoft-dpad-up": boolean;
        "gamepad-microsoft-dpad-down": boolean;
        "gamepad-microsoft-dpad-left": boolean;
        "gamepad-microsoft-dpad-right": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends SonyButtonMap {
    }
    interface SonyButtonMap {
        "gamepad-sony-cross": boolean;
        "gamepad-sony-circle": boolean;
        "gamepad-sony-square": boolean;
        "gamepad-sony-triangle": boolean;
        "gamepad-sony-l1": boolean;
        "gamepad-sony-r1": boolean;
        "gamepad-sony-l2": boolean;
        "gamepad-sony-r2": boolean;
        "gamepad-sony-select": boolean;
        "gamepad-sony-start": boolean;
        "gamepad-sony-playstation": boolean;
        "gamepad-sony-l3": boolean;
        "gamepad-sony-r3": boolean;
        "gamepad-sony-touchpad": boolean;
        "gamepad-sony-dpad-up": boolean;
        "gamepad-sony-dpad-down": boolean;
        "gamepad-sony-dpad-left": boolean;
        "gamepad-sony-dpad-right": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends XboxButtonMap {
    }
    interface DeviceTypeMap {
        "gamepad-xbox": void;
    }
    interface XboxButtonMap {
        "gamepad-xbox-a": boolean;
        "gamepad-xbox-b": boolean;
        "gamepad-xbox-x": boolean;
        "gamepad-xbox-y": boolean;
        "gamepad-xbox-left-bumper": boolean;
        "gamepad-xbox-right-bumper": boolean;
        "gamepad-xbox-left-trigger": boolean;
        "gamepad-xbox-right-trigger": boolean;
        "gamepad-xbox-back": boolean;
        "gamepad-xbox-start": boolean;
        "gamepad-xbox-guide": boolean;
        "gamepad-xbox-left-stick-click": boolean;
        "gamepad-xbox-right-stick-click": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends Xb360ButtonMap {
    }
    interface DeviceTypeMap {
        "gamepad-xb360": void;
    }
    interface Xb360ButtonMap {
        "gamepad-xb360-a": boolean;
        "gamepad-xb360-b": boolean;
        "gamepad-xb360-x": boolean;
        "gamepad-xb360-y": boolean;
        "gamepad-xb360-left-bumper": boolean;
        "gamepad-xb360-right-bumper": boolean;
        "gamepad-xb360-left-trigger": boolean;
        "gamepad-xb360-right-trigger": boolean;
        "gamepad-xb360-back": boolean;
        "gamepad-xb360-start": boolean;
        "gamepad-xb360-guide": boolean;
        "gamepad-xb360-left-stick-click": boolean;
        "gamepad-xb360-right-stick-click": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends XbOneButtonMap {
    }
    interface DeviceTypeMap {
        "gamepad-xbone": void;
    }
    interface XbOneButtonMap {
        "gamepad-xbone-a": boolean;
        "gamepad-xbone-b": boolean;
        "gamepad-xbone-x": boolean;
        "gamepad-xbone-y": boolean;
        "gamepad-xbone-left-bumper": boolean;
        "gamepad-xbone-right-bumper": boolean;
        "gamepad-xbone-left-trigger": boolean;
        "gamepad-xbone-right-trigger": boolean;
        "gamepad-xbone-view": boolean;
        "gamepad-xbone-menu": boolean;
        "gamepad-xbone-xbox": boolean;
        "gamepad-xbone-left-stick-click": boolean;
        "gamepad-xbone-right-stick-click": boolean;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap extends SaitekX52ButtonMap {
    }
    interface AxisMap extends SaitekX52AxisMap {
    }
    interface StickMap extends SaitekX52StickMap {
    }
    interface DeviceTypeMap {
        "saitek-x52": void;
    }
    interface SaitekX52ButtonMap {
        "saitek-x52-trigger-half": boolean;
        "saitek-x52-trigger-full": boolean;
        "saitek-x52-trigger-pinky": boolean;
        "saitek-x52-fire": boolean;
        "saitek-x52-a": boolean;
        "saitek-x52-b": boolean;
        "saitek-x52-c": boolean;
        "saitek-x52-d": boolean;
        "saitek-x52-e": boolean;
        "saitek-x52-i": boolean;
        "saitek-x52-t1": boolean;
        "saitek-x52-t2": boolean;
        "saitek-x52-t3": boolean;
        "saitek-x52-t4": boolean;
        "saitek-x52-t5": boolean;
        "saitek-x52-t6": boolean;
        "saitek-x52-mfd-function": boolean;
        "saitek-x52-mfd-up": boolean;
        "saitek-x52-mfd-down": boolean;
        "saitek-x52-hat-thumb-up": boolean;
        "saitek-x52-hat-thumb-down": boolean;
        "saitek-x52-hat-thumb-left": boolean;
        "saitek-x52-hat-thumb-right": boolean;
        "saitek-x52-hat-alt-up": boolean;
        "saitek-x52-hat-alt-down": boolean;
        "saitek-x52-hat-alt-left": boolean;
        "saitek-x52-hat-alt-right": boolean;
        "saitek-x52-hat-throttle-up": boolean;
        "saitek-x52-hat-throttle-down": boolean;
        "saitek-x52-hat-throttle-left": boolean;
        "saitek-x52-hat-throttle-right": boolean;
        "saitek-x52-mouse-click": boolean;
        "saitek-x52-mouse-wheel": boolean;
        "saitek-x52-mode-1": boolean;
        "saitek-x52-mode-2": boolean;
        "saitek-x52-mode-3": boolean;
        "saitek-x52-mouse-wheel-down": boolean;
        "saitek-x52-mouse-wheel-up": boolean;
    }
    interface SaitekX52StickMap {
        "saitek-x52-joystick": void;
        "saitek-x52-mouse": void;
    }
    interface SaitekX52AxisMap {
        "saitek-x52-mouse-x": number;
        "saitek-x52-mouse-y": number;
        "saitek-x52-throttle": number;
        "saitek-x52-throttle-thumb-slider": number;
        "saitek-x52-joystick-x": number;
        "saitek-x52-joystick-y": number;
        "saitek-x52-joystick-twist": number;
        "saitek-x52-e-dial": number;
        "saitek-x52-i-dial": number;
    }
}
declare namespace mmk.gamepad.metadata {
    interface ButtonMap {
    }
    interface DeviceTypeMap {
        /** Device should not be considered a real gamepad */ "dead": void;
        /** Device is unknown - not a "standard" gamepad or anything. */ "unknown-unknown": void;
    }
}
//# sourceMappingURL=global.d.ts.map